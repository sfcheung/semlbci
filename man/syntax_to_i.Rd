% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/syntax_to_i.R
\name{syntax_to_i}
\alias{syntax_to_i}
\title{Parameter Positions From lavaan Syntax}
\usage{
syntax_to_i(syntax, sem_out)
}
\arguments{
\item{syntax}{A vector of parameters, defined as in lavaan.}

\item{sem_out}{The SEM output. Currently \code{lavaan} output only.}
}
\value{
A vector of positions in the parameter table.
}
\description{
Converts lavaan syntax to positions in the fit object
parameter table
}
\details{
\code{\link[=syntax_to_i]{syntax_to_i()}} converts a vector of strings, in lavaan syntax, to the
positions in the parameter table of a \link[lavaan:lavaan-class]{lavaan::lavaan} fit object.

Each element in the vector should have left hand side (\code{lhs}),
operator (\code{op}), and/or right hand side (\code{rhs}). For example, "m ~ x"
denotes the coefficient of the path from \code{x} to \code{m}. "y ~~ x"
denotes the covariance between \code{y} and \code{x}.

For user-defined parameters, only \code{lhs} and \code{op} will be
interpreted. For example, to specify the user parameter \code{ab}, "ab
:= x" will do. The right hand side will be ignored.

To denote a labelled parameters, e.g., "y ~ a*x", treat it as a user-defined
parameters us use \verb{:=}, e.g., "a :=" in this example.

For multiple-group models, if a parameter is specified as in a single-group
models, then this parameter in all groups will be selected. For example,
if a model has three groups, "y ~ x" denotes this path parameter in all
three groups, and it will be converted to three row numbers. To select
the parameter in a specific group, label the parameter and select it using
\verb{:=} as described above.

Elements that cannot be converted to a parameter in the parameter table will
be ignored.

Currently supports \link[lavaan:lavaan-class]{lavaan::lavaan} outputs only.
}
\examples{

library(lavaan)
data(simple_med)
mod <-
"
m ~ a*x
y ~ b*m
ab:= a*b
asq:= a^2
"
fit_med <- sem(mod, simple_med, fixed.x = FALSE)
p_table <- parameterTable(fit_med)

pars <- c("m ~ x",
          "y ~ m",
          "asq := 1",
          "ab  := 2",
          "not in table")
out <- syntax_to_i(pars, fit_med)
out
p_table[out, ]

}
