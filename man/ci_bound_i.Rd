% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ci_bound_i.R
\name{ci_bound_i}
\alias{ci_bound_i}
\title{Find the lower or upper bound for one parameter}
\usage{
ci_bound_i(
  i = NULL,
  npar = NULL,
  sem_out = NULL,
  f_constr = NULL,
  which = NULL,
  history = FALSE,
  perturbation_factor = 0.9,
  lb_var = -Inf,
  wald_ci_start = TRUE,
  standardized = FALSE,
  opts = list(algorithm = "NLOPT_LD_SLSQP", xtol_rel = 1e-10, maxeval = 1000,
    print_level = 0),
  ...
)
}
\arguments{
\item{i}{The position of the target parameters as in the parameter table of lavaan.}

\item{npar}{The number of free parameters, including those constrained to be equal.}

\item{sem_out}{The fit object.}

\item{f_constr}{The constraint function generated by \code{set_constraint}.}

\item{which}{Whether the lower bound or the upper bound is to be found. Must be "lbound" or "ubound".}

\item{history}{If \code{TRUE}, return the full optimization output as an attribute. Default is \code{FALSE}.}

\item{perturbation_factor}{A number multiplied to the parameter estimates in the fit object.
Using the parameter estimates as starting values may lead to errors
in the first few iterations. Default is .90.}

\item{lb_var}{The lower bound for free parameters that are variances. Defautl is -Inf. This is not an admissible
value but seems to be necessary when we need to find the LBCI for user-defined parameter.}

\item{wald_ci_start}{If TRUE and there are no equality constraints in the model, Wald confidence limit will
be used as the starting value for the target parameter if it is not a userd-defined paramter.}

\item{standardized}{If TRUE, the LBCI is for the standardized estimate.}

\item{opts}{Options to be passed to \code{nloptr}}

\item{...}{Optional arguments. Not used.}
}
\value{
The requested bound.
Can return the optimization history as an attribute.
}
\description{
Find the lower or upper bound for one parameter.
}
\details{
Currently supports \code{lavaan} output only.
}
\examples{
library(lavaan)
data(cfa_two_factors)
mod <-
"
f1 =~ x1 + x2 + a*x3
f2 =~ x4 + a*x5 + equal('f1=~x2')*x6
f1 ~~ 0*f2
asq := a^2
"
fit <- sem(mod, cfa_two_factors)
}
