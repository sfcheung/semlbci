[{"path":"https://sfcheung.github.io/semlbci/articles/loglike.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Log Profile Likelihood of a Parameter","text":"vignette illustrates use loglike_compare() package semlbci compare log profile likelihood parameter structural equation model (SEM) fixed range values log profile likelihood approximated quadratic function, using method Pawitan (2013).","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/loglike.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Log Profile Likelihood of a Parameter","text":"function loglike_compare() helper functions creating illustrative examples learning , research use. Therefore, versatile semlbci() types models parameters supported. can used free parameters user-defined parameters involved constraints. model fitted maximum likelihood supported. Last, check whether computation appropriate model. responsibility users ensure computation appropriate model parameter. Despite limitations, still useful generating graphs illustration learning.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/loglike.html","id":"fitting-a-simple-mediation-model","dir":"Articles","previous_headings":"","what":"Fitting a Simple Mediation model","title":"Log Profile Likelihood of a Parameter","text":"Suppose simple mediation model fitted dataset simple_med, came package semlbci:","code":"library(lavaan) library(semlbci) dat <- simple_med mod <- \" m ~ a * x y ~ b * m ab := a * b \" fit <- lavaan::sem(model = mod,                    data = simple_med,                    fixed.x = FALSE) parameterEstimates(fit) #>   lhs op rhs label    est    se      z pvalue ci.lower ci.upper #> 1   m  ~   x     a  1.676 0.431  3.891  0.000    0.832    2.520 #> 2   y  ~   m     b  0.535 0.073  7.300  0.000    0.391    0.679 #> 3   m ~~   m       34.710 3.471 10.000  0.000   27.907   41.513 #> 4   y ~~   y       40.119 4.012 10.000  0.000   32.256   47.982 #> 5   x ~~   x        0.935 0.094 10.000  0.000    0.752    1.118 #> 6  ab := a*b    ab  0.897 0.261  3.434  0.001    0.385    1.409"},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/articles/loglike.html","id":"the-a-path","dir":"Articles","previous_headings":"Log Profile likelihood Plots","what":"The a-path","title":"Log Profile Likelihood of a Parameter","text":"generate plot -path coefficient, can simply call loglike_compare() setting parameter \"\". Although teh -path labelled, par_i requires parameter specified lavaan::model.syntax. Please refer help page loglike_compare. default, 21 values used generate plot. can controlled argument n_points. run finishes, can use plot() plot likelihood values: -path expected, log profile likelihood -path well-approximated quadratic approximation.","code":"ll_a <- loglike_compare(fit,                         par_i = \"m ~ x\") plot(ll_a, add_pvalues = TRUE)"},{"path":"https://sfcheung.github.io/semlbci/articles/loglike.html","id":"the-indirect-effect","dir":"Articles","previous_headings":"Log Profile likelihood Plots","what":"The indirect effect","title":"Log Profile Likelihood of a Parameter","text":"Let us examine log profile likelihood indirect effect. specify , need use ab :=: Note usually take longer parameter nonlinear function parameters, indirect effect, product two parameters. plot: Indirect Effect can see , expected, quadratic approximation less satisfactory indirect effect. Please refer help page loglike_compare() plot method (plot.loglike_compare()), available options.","code":"ll_ab <- loglike_compare(fit,                          par_i = \"ab := \") plot(ll_ab, add_pvalues = TRUE)"},{"path":"https://sfcheung.github.io/semlbci/articles/loglike.html","id":"final-remarks","dir":"Articles","previous_headings":"","what":"Final Remarks","title":"Log Profile Likelihood of a Parameter","text":"functions, loglike_range(), loglike_point(), loglike_quad_range(), loglike_quad_point() helper functions used loglike_compare(). exported interested users can use compute points directly. examples can found “examples” folders OSF page package Cheung Pesigan (2023). figures examples generated functions.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/loglike.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Log Profile Likelihood of a Parameter","text":"Cheung, S. F., & Pesigan, . J. . (2023). semlbci: R package forming likelihood-based confidence intervals parameter estimates, correlations, indirect effects, derived parameters. Structural Equation Modeling: Multidisciplinary Journal. Advance online publication. https://doi.org/10.1080/10705511.2023.2183860 Pawitan, Y. (2013). likelihood: Statistical modelling inference using likelihood. Oxford University Press.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"package semlbci (Cheung & Pesigan, 2023) includes functions finding likelihood-based confidence intervals (LBCIs) parameters output structural equation modeling (SEM) function. Currently, supports output lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa(). latest stable version can installed GitHub: information semlbci can found Cheung Pesigan (2023).","code":"remotes::install_github(\"sfcheung/semlbci\")"},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"fit-a-model-to-a-dataset","dir":"Articles","previous_headings":"","what":"Fit a Model to a Dataset","title":"Get Started","text":"package dataset, simple_med, three variables, x, m, y. Let us fit simple mediation model dataset. illustrate find LBCIs user-defined parameters, labelled m ~ x path , y ~ m path b, defined indirect effect, ab, * b. summary:","code":"library(semlbci) data(simple_med) dat <- simple_med head(dat) #>            x          m         y #> 1 -0.3447375   7.284273 -5.636897 #> 2 -0.3658919  -5.449121 -4.525402 #> 3 -0.8294968  -7.016254 -7.823257 #> 4 -0.3389654   4.367018  1.563098 #> 5 -0.9628162  -4.015469 -7.288511 #> 6 -1.0749302 -11.538140 -4.153572 library(lavaan) mod <- \" m ~ a*x y ~ b*m ab := a * b \" # We set fixed.x = FALSE because we will also find the LBCIs for # standardized solution fit <- sem(mod, simple_med, fixed.x = FALSE) summary(fit, standardized = TRUE) #> lavaan 0.6.15 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                         5 #>  #>   Number of observations                           200 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                10.549 #>   Degrees of freedom                                 1 #>   P-value (Chi-square)                           0.001 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>   m ~                                                                    #>     x          (a)    1.676    0.431    3.891    0.000    1.676    0.265 #>   y ~                                                                    #>     m          (b)    0.535    0.073    7.300    0.000    0.535    0.459 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>    .m                34.710    3.471   10.000    0.000   34.710    0.930 #>    .y                40.119    4.012   10.000    0.000   40.119    0.790 #>     x                 0.935    0.094   10.000    0.000    0.935    1.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all #>     ab                0.897    0.261    3.434    0.001    0.897    0.122"},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Get Started","text":"main function find LBCIs free parameters semlbci(). function used normal users. first illustrate usage examples, present technical details following section.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"find-the-lbci-for-a-free-parameter","dir":"Articles","previous_headings":"Examples","what":"Find the LBCI for a free parameter","title":"Get Started","text":"free parameters can specified lavaan style. example, path m y denoted \"y ~ m\", covariance correlation x m (example) denoted \"x ~~ m\" (order matter). output parameter table fitted lavaan object, two columns added, lbci_lb lbci_ub, likelihood-based lower bounds upper bounds, respectively. example, point estimate unstandardized coefficient x m 1.676, LBCI 0.828 2.525.","code":"out <- semlbci(sem_out = fit,                pars = c(\"y ~ m\",                         \"m ~ x\")) out #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 1  1   m  ~   x     a 1.676   0.828   2.525 0.832 2.520 0.950 0.950 #> 2  2   y  ~   m     b 0.535   0.391   0.679 0.391 0.679 0.950 0.950 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #>  #> Call: #> semlbci(sem_out = fit, pars = c(\"y ~ m\", \"m ~ x\"))"},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"find-the-lbci-for-a-user-defined-parameter","dir":"Articles","previous_headings":"Examples","what":"Find the LBCI for a User-Defined Parameter","title":"Get Started","text":"find LBCI user-defined parameter, use label :=, label label used model specification. definition parameter can omitted. content := ignored semlbci(). example, point estimate indirect effect 0.897, LBCI 0.427 1.464. (Note: examples, added annotation = FALSE suppress annotation printout minimize length vignette.)","code":"out <- semlbci(sem_out = fit,                pars = c(\"ab := \")) print(out, annotation = FALSE) #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 6  6  ab := a*b    ab 0.897   0.427   1.464 0.385 1.409 0.950 0.950"},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"find-the-lbci-for-the-parameters-in-the-standardized-metric","dir":"Articles","previous_headings":"Examples","what":"Find the LBCI for the Parameters in the Standardized Metric","title":"Get Started","text":"default, unstandardized solution used semlbci(). LBCIs standardized solution solution needed, set standardized = TRUE. LBCIs standardized user-defined parameters can requested similarly.","code":"out <- semlbci(sem_out = fit,                pars = c(\"y ~ m\",                         \"m ~ x\"),                standardized = TRUE) print(out, annotation = FALSE) #>  #> Results: #>   lhs op rhs id label est.std lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 1   m  ~   x  1     a   0.265   0.133   0.389 0.136 0.394 0.950 0.950 #> 2   y  ~   m  2     b   0.459   0.342   0.561 0.349 0.568 0.950 0.950 out <- semlbci(sem_out = fit,                pars = c(\"ab :=\"),                standardized = TRUE) print(out, annotation = FALSE) #>  #> Results: #>   lhs op rhs id label est.std lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 6  ab := a*b  6    ab   0.122   0.059   0.194 0.054 0.189 0.950 0.950"},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"sem_out-and-pars-the-fit-object-and-the-parameters","dir":"Articles","previous_headings":"Basic Arguments in semlbci()","what":"sem_out and pars: The fit object and the parameters","title":"Get Started","text":"required argument semlbci() sem_out, fit object lavaan::lavaan() wrappers (e.g., lavann::cfa() lavaan::sem()). default, semlbci() find LBCIs free parameters (except variances error variances) user-defined parameters, can take long time model many parameters. Moreover, LBCI usually used Wald-type confidence interval may suitable, example, forming confidence interval indirect effect parameter standardized solution. parameters may sampling distributions asymmetric otherwise substantially nonnormal due bounded parameter spaces reasons. Therefore, recommended call semlbci() without specifying parameters. time run long, call semlbci() selected parameters. argument pars model syntax vector strings specifies parameters LBCIs formed (detailed ). time concern, example, users want explore LBCIs free user-defined parameters final model, pars can omitted request LBCIs free parameters (except variances covariances) user-defined parameters () model.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"ciperc-the-level-of-confidence","dir":"Articles","previous_headings":"Basic Arguments in semlbci()","what":"ciperc: The level of confidence","title":"Get Started","text":"default, 95% LBCIs unstandardized solution formed. change level confidence, set argument ciperc desired coverage probability, e.g., .95 95%, .90 90%.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"standardized-whether-standardized-solution-is-used","dir":"Articles","previous_headings":"Basic Arguments in semlbci()","what":"standardized: Whether standardized solution is used","title":"Get Started","text":"default, LBCIs unstandardized solution formed. LBCIs standardized solution desired, set standardized = TRUE. Note models can much slower find LBCIs standardized solution unstandardized solution.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"parallel-and-ncpus","dir":"Articles","previous_headings":"Basic Arguments in semlbci()","what":"parallel and ncpus","title":"Get Started","text":"search bounds needs done separately bound can take long time model many parameters /equality constraints. Therefore, parallel processing always enabled setting parallel TRUE ncpus number smaller number available cores. example, without parallel processing, following search took 28 seconds Intel i7-8700: parallel processing enabled using 6 cores, took 20 seconds. speed difference can much greater model many parameters equality constraints. Enabling parallel processing also added benefit showing progress real time.","code":"data(HolzingerSwineford1939) mod_test <- ' visual  =~ x1 + x2 + x3 textual =~ x4 + x5 + x6 speed   =~ x7 + x8 + x9 ' fit_cfa <- cfa(model = mod_test,                data = HolzingerSwineford1939) semlbci(fit_cfa) semlbci(fit_cfa,         parallel = TRUE,         ncpus = 6)"},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"other-arguments","dir":"Articles","previous_headings":"Basic Arguments in semlbci()","what":"Other arguments","title":"Get Started","text":"detailed documentation arguments, please refer help page semlbci(). Advanced users want tweak optimization options can check help pages ci_bound_wn_i() ci_i_one(),","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"multiple-group-models","dir":"Articles","previous_headings":"Additional Features","what":"Multiple-group Models","title":"Get Started","text":"semlbci() supports multiple-group models. example, two-group confirmatory factor analysis model equality constraints: factor correlations group constrained equal. LBCI covariance visual ability textual ability: LBCI correlation visual ability textual ability:","code":"data(HolzingerSwineford1939) mod_cfa <- ' visual  =~ x1 + v(lambda2, lambda2)*x2 + v(lambda3, lambda3)*x3 textual =~ x4 + v(lambda5, lambda5)*x5 + v(lambda6, lambda6)*x6 speed   =~ x7 + v(lambda8, lambda8)*x8 + v(lambda9, lambda9)*x9 ' fit_cfa <- cfa(model = mod_cfa,                data = HolzingerSwineford1939,                group = \"school\") parameterEstimates(fit_cfa)[c(22, 23, 58, 59), ] #>       lhs op     rhs block group label   est    se     z pvalue ci.lower #> 22 visual ~~ textual     1     1       0.416 0.097 4.271  0.000    0.225 #> 23 visual ~~   speed     1     1       0.169 0.064 2.643  0.008    0.044 #> 58 visual ~~ textual     2     2       0.437 0.099 4.423  0.000    0.243 #> 59 visual ~~   speed     2     2       0.314 0.079 3.958  0.000    0.158 #>    ci.upper #> 22    0.606 #> 23    0.294 #> 58    0.631 #> 59    0.469 fcov <- semlbci(fit_cfa,                 pars = c(\"visual ~~ textual\")) print(fcov, annotation = FALSE) #>  #> Results: #>    id    lhs op     rhs group label   est lbci_lb lbci_ub    lb    ub cl_lb #> 22 22 visual ~~ textual     1       0.416   0.221   0.654 0.225 0.606 0.950 #> 58 58 visual ~~ textual     2       0.437   0.263   0.663 0.243 0.631 0.950 #>    cl_ub #> 22 0.950 #> 58 0.950 fcor <- semlbci(fit_cfa,                 pars = c(\"visual ~~ textual\"),                 standardized = TRUE) print(fcor, annotation = FALSE) #>  #> Results: #>       lhs op     rhs group id label est.std lbci_lb lbci_ub    lb    ub cl_lb #> 22 visual ~~ textual     1 22         0.485   0.291   0.640 0.315 0.654 0.950 #> 58 visual ~~ textual     2 58         0.540   0.357   0.692 0.373 0.708 0.950 #>    cl_ub #> 22 0.950 #> 58 0.950"},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"robust-lbci","dir":"Articles","previous_headings":"Additional Features","what":"Robust LBCI","title":"Get Started","text":"semlbci() also supports robust LBCI proposed Falk (2018). form robust LBCI, model must fitted robust test statistics requested (e.g., estimator = \"MLR\"). request robust LBCIs, add robust = \"satorra.2000\" calling semlbci(). use simple mediation model example:","code":"fit_robust <- sem(mod, simple_med,                   fixed.x = FALSE,                   estimator = \"MLR\") fit_lbci_ab_robust <- semlbci(fit_robust,                               pars = \"ab := \",                               robust = \"satorra.2000\") print(fit_lbci_ab_robust, annotation = FALSE) #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 6  6  ab := a*b    ab 0.897   0.353   1.571 0.299 1.495 0.950 0.950 #>         robust #> 6 satorra.2000"},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"latent-level-parameters","dir":"Articles","previous_headings":"Additional Features","what":"Latent level parameters","title":"Get Started","text":"semlbci() support forming LBCIs free parameters. illustrated LBCIs can formed path coefficients latent variables also user-defined parameters based latent-level parameters, indirect effect one latent variable another.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"more-examples","dir":"Articles","previous_headings":"Additional Features","what":"More examples","title":"Get Started","text":"examples can found “examples” folders OSF page package.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Get Started","text":"following summary limitations semlbci(). Please refer check_sem_out() full list limitations. function called semlbci() check sem_out object, raise warnings errors appropriate.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"estimators","dir":"Articles","previous_headings":"Limitations","what":"Estimators","title":"Get Started","text":"function semlbci() currently supports lavaan::lavaan() results estimated maximum likelihood (ML), full information maximum likelihood missing data (fiml), robust variants (e.g., MLM).","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"models","dir":"Articles","previous_headings":"Limitations","what":"Models","title":"Get Started","text":"package currently supports single multiple group models continuous variables. may work model ordered variables officially tested.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"methods","dir":"Articles","previous_headings":"Limitations","what":"Methods","title":"Get Started","text":"current preferred method one proposed Wu Neale (2012), illustrated Pek Wu (2015). current implementation semlbci() check whether parameter near boundary. advanced methods Pritikin, Rappaport, Neale (2017) considered future development.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"technical-details","dir":"Articles","previous_headings":"","what":"Technical Details","title":"Get Started","text":"detailed presentation internal workflow semlbci() can found vignette(\"technical_workflow\", package = \"semlbci\"). Users interested calling lowest level function, ci_bound_wn_i(), can see illustrative examples vignette(\"technical_searching_one_bound\", package = \"semlbci\").","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/semlbci.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get Started","text":"Cheung, S. F., & Pesigan, . J. . (2023). semlbci: R package forming likelihood-based confidence intervals parameter estimates, correlations, indirect effects, derived parameters. Structural Equation Modeling: Multidisciplinary Journal. Advance online publication. https://doi.org/10.1080/10705511.2023.2183860 Falk, C. F. (2018). robust standard errors best approach interval estimation nonnormal data structural equation modeling? Structural Equation Modeling: Multidisciplinary Journal, 25(2), 244-266. https://doi.org/10.1080/10705511.2017.1367254 Pek, J., & Wu, H. (2015). Profile likelihood-based confidence intervals regions structural equation models. Psychometrika, 80(4), 1123–1145. https://doi.org/10.1007/s11336-015-9461-1 Pritikin, J. N., Rappaport, L. M., & Neale, M. C. (2017). Likelihood-based confidence intervals parameter upper lower bound. Structural Equation Modeling: Multidisciplinary Journal, 24(3), 395-401. https://doi.org/10.1080/10705511.2016.1275969 Wu, H., & Neale, M. C. (2012). Adjusted confidence intervals bounded parameter. Behavior Genetics, 42(6), 886–898. https://doi.org/10.1007/s10519-012-9560-z","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_searching_one_bound.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Searching for One Bound","text":"vignette based technical appendix hosted OSF project site Cheung & Pesigan (2023), associated package semlbci. presents use ci_bound_wn_i() directly search one bound (limit) likelihood-based confidence interval (LBCI). function used common users. However, advanced users interested customizing optimization, examining search details, just know implementation, can try ci_bound_wn_i() directly. workflows semlbci() ci_bound_wn_i(), please refer technical_workflow. vignette illustrates use ci_bound_wn_i().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/articles/technical_searching_one_bound.html","id":"a-simple-mediation-model","dir":"Articles","previous_headings":"Examples","what":"A Simple Mediation Model","title":"Searching for One Bound","text":"dataset simple_med semlbci used fit simple mediation model: First, use set_constraint() set constraint likelihood ratio test used method proposed Wu & Neale (2012) adapted Pek & Wu (2015), ciperc set level confidence LBCI formed (.95 95%):","code":"library(semlbci) library(lavaan) dat <- simple_med mod <- \" m ~ a*x y ~ b*m ab := a*b \" fit <- sem(model = mod,            data = dat) fn_constraint <- set_constraint(fit,                                 ciperc = .95)"},{"path":"https://sfcheung.github.io/semlbci/articles/technical_searching_one_bound.html","id":"find-the-lbci-of-a-regression-coefficient","dir":"Articles","previous_headings":"Examples > A Simple Mediation Model","what":"Find the LBCI of a Regression Coefficient","title":"Searching for One Bound","text":"find lower bound LBCI , say, y ~ m, first check row number parameter parameter table: parameter 2nd row. check number free parameters table, ignoring equality constraints. can done counting number nonzero entries column free. model, number free parameters 4. can call ci_bound_wn_i(): output cibound-class object print method printing diagnostic information. printout explained briefly : Target Parameter: target parameter, lavaan syntax form. Position: position target parameter parameter table (row number). Bound: Whether lower bound (limit) upper bound (limit) requested. Method: method used. Currently, method proposed Wu & Neale (2012) adapted Pek & Wu (2015) supported. Confidence Level: level confidence requested. Achieved Level: One minus p-value likelihood ratio test target parameter (function parameter) fixed bound found. value close Confidence Level, although small difference expected allowed. Standardized: Whether bound standardized solution requested. Likelihood-Based Bound: bound found. Set NA status code equal 1. Wald Bound: original bound, bound Wald confidence interval, delta-method confidence user-defined parameter standardized solution. Point Estimate: point estimate original solution. Ratio Wald Bound: ratio distance Likelihood-Based Bound Point Estimate distance Wald Bound Point Estimate. greater one, Likelihood-Based Bound farther away point estimate Wald Bound. less one, Likelihood-Based Bound closer point estimate Wald Bound. Level achieved: Whether Achieved Level close enough Confidence Level, defined whether absolute difference p-value likelihood ratio test 1 - ciperc less equal p_tol (default 5e-4). , status code set 1. Check: Whether solution (see ) admissible, defined setting lavaan check.post = TRUE (variances non-negative, model-implied covariance matrices positive semidefinite), check.vcov = TRUE (variance-covariance matrix free parameters positive definite), check.start = TRUE (used test consistency solution). solution fails tests, status code set 1. Direction valid?: Whether direction bound valid: lower bound less point estimate, upper bound greater point estimate. invalid, status code set 1. Optimization Information: section prints information returned nloptr::nloptr(), status code, convergence message (criterion met), number iterations, termination conditions set (xtol_rel, ftol_rel, maxevel arguments nloptr::nloptr()). status code nlopter::nlotpr() less zero, indicating status \"success\", status code function set 1. Parameter Estimates: values free parameters. Start staring values optimization. Final values convergence (solution), Change Final - Start. Bound check: bound found checks presented . printed bound fails checks, NA returned prevent accidental use potentially invalid bound. needed diagnosis, bound fails checks can found . Status Code: code either 0 1. 0, means bound passes checks presented . 1, means fails least one checks. cibound-class object three elements: bound: bound found. NA status code equal 0. diag: Diagnostic information. stores information presented printout described , . verbose set TRUE, status code nloptr::nloptr() (function) less one, original output nloptr::nloptr() also stored examination. call: original call. can verify definitional validity bound likelihood ratio test manually: p-value .05 (1 - .95). Therefore, bound, 0.3907302 correct definition. process can repeated = \"ubound\" find upper bound: p-value .05 (1 - .95). Therefore, bound, 0.679435 correct definition.","code":"parameterTable(fit) #>   id lhs op rhs user block group free ustart exo label plabel  start    est #> 1  1   m  ~   x    1     1     1    1     NA   0     a   .p1.  1.676  1.676 #> 2  2   y  ~   m    1     1     1    2     NA   0     b   .p2.  0.535  0.535 #> 3  3   m ~~   m    0     1     1    3     NA   0         .p3. 34.710 34.710 #> 4  4   y ~~   y    0     1     1    4     NA   0         .p4. 40.119 40.119 #> 5  5   x ~~   x    0     1     1    0     NA   1         .p5.  0.935  0.935 #> 6  6  ab := a*b    1     0     0    0     NA   0    ab         0.000  0.897 #>      se #> 1 0.431 #> 2 0.073 #> 3 3.471 #> 4 4.012 #> 5 0.000 #> 6 0.261 out_lb <- ci_bound_wn_i(i = 2,                         npar = 4,                         sem_out = fit,                         f_constr = fn_constraint,                         which = \"lbound\",                         verbose = TRUE,                         ciperc = .95) out_lb #> Target Parameter:    y ~ m (group = 1, block = 1) #> Position:        2 #> Which Bound:     Lower Bound #> Method:          Wu-Neale-2012 #> Confidence Level:    0.95 #> Achieved Level:      0.950000000016768 #> Standardized:        No #> Likelihood-Based Bound:  0.39073 #> Wald Bound:      0.39142 #> Point Estimate:      0.53508 #> Ratio to Wald Bound: 1.00482 #>  #> -- Check -- #> Level achieved?      Yes (Difference: 1.6768e-11; Tolerance: 5e-04) #> Solution admissible? Yes #> Direction valid? Yes #>  #> -- Optimization Information -- #> Solver Status:       3 #> Convergence Message: NLOPT_FTOL_REACHED: Optimization stopped because ftol_rel or ftol_abs (above) was reached. #> Iterations:      3 #> Termination Conditions: #>  xtol_rel: 1e-05 #>  ftol_rel: 1e-05 #>  maxeval:  500 #>  #> -- Parameter Estimates -- #>              a        b    m~~m     y~~y #> Start  1.67613  0.39142 34.7103 40.88953 #> Final  1.67613  0.39073 34.7103 40.88955 #> Change 0.00000 -0.00069  0.0000  0.00002 #>  #> Bound before check:  0.39073 #> Status Code:     0 #> Call: ci_bound_wn_i(i = 2, npar = 4, sem_out = fit, f_constr = fn_constraint,  #>     which = \"lbound\", ciperc = 0.95, verbose = TRUE) names(out_lb) #> [1] \"bound\" \"diag\"  \"call\" mod_chk <- \" m ~ a*x y ~ b*m ab := a*b b == 0.3907302 \" fit_chk <- sem(model = mod_chk,                data = dat) lavTestLRT(fit, fit_chk) #>  #> Chi-Squared Difference Test #>  #>         Df    AIC    BIC  Chisq Chisq diff   RMSEA Df diff Pr(>Chisq)   #> fit      1 2590.9 2604.1 10.549                                         #> fit_chk  2 2592.8 2602.7 14.390     3.8415 0.11919       1       0.05 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 out_ub <- ci_bound_wn_i(i = 2,                         npar = 4,                         sem_out = fit,                         f_constr = fn_constraint,                         which = \"ubound\",                         verbose = TRUE,                         ciperc = .95) out_ub #> Target Parameter:    y ~ m (group = 1, block = 1) #> Position:        2 #> Which Bound:     Upper Bound #> Method:          Wu-Neale-2012 #> Confidence Level:    0.95 #> Achieved Level:      0.950000000016757 #> Standardized:        No #> Likelihood-Based Bound:  0.67944 #> Wald Bound:      0.67874 #> Point Estimate:      0.53508 #> Ratio to Wald Bound: 1.00482 #>  #> -- Check -- #> Level achieved?      Yes (Difference: 1.6757e-11; Tolerance: 5e-04) #> Solution admissible? Yes #> Direction valid? Yes #>  #> -- Optimization Information -- #> Solver Status:       3 #> Convergence Message: NLOPT_FTOL_REACHED: Optimization stopped because ftol_rel or ftol_abs (above) was reached. #> Iterations:      3 #> Termination Conditions: #>  xtol_rel: 1e-05 #>  ftol_rel: 1e-05 #>  maxeval:  500 #>  #> -- Parameter Estimates -- #>              a       b    m~~m     y~~y #> Start  1.67613 0.67874 34.7103 40.88953 #> Final  1.67613 0.67944 34.7103 40.88955 #> Change 0.00000 0.00069  0.0000  0.00002 #>  #> Bound before check:  0.67944 #> Status Code:     0 #> Call: ci_bound_wn_i(i = 2, npar = 4, sem_out = fit, f_constr = fn_constraint,  #>     which = \"ubound\", ciperc = 0.95, verbose = TRUE) mod_chk <- \" m ~ a*x y ~ b*m ab := a*b b == 0.679435 \" fit_chk <- sem(model = mod_chk,                data = dat) lavTestLRT(fit, fit_chk) #>  #> Chi-Squared Difference Test #>  #>         Df    AIC    BIC  Chisq Chisq diff   RMSEA Df diff Pr(>Chisq)   #> fit      1 2590.9 2604.1 10.549                                         #> fit_chk  2 2592.8 2602.7 14.390     3.8415 0.11919       1       0.05 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://sfcheung.github.io/semlbci/articles/technical_searching_one_bound.html","id":"find-the-lbci-of-a-function-of-coefficients-the-indirect-effect","dir":"Articles","previous_headings":"Examples > A Simple Mediation Model","what":"Find the LBCI of a Function of Coefficients: The Indirect Effect","title":"Searching for One Bound","text":"find bounds user-defined parameters, example, indirect effect model, steps . indirect effect, ab, 6th row. Therefore, set 6. arguments previous example. printout: bound passes checks. can verify bound using likelihood ratio test: p-value .05 (1 - .95). Therefore, bound, 0.4265275 correct definition.","code":"parameterTable(fit) #>   id lhs op rhs user block group free ustart exo label plabel  start    est #> 1  1   m  ~   x    1     1     1    1     NA   0     a   .p1.  1.676  1.676 #> 2  2   y  ~   m    1     1     1    2     NA   0     b   .p2.  0.535  0.535 #> 3  3   m ~~   m    0     1     1    3     NA   0         .p3. 34.710 34.710 #> 4  4   y ~~   y    0     1     1    4     NA   0         .p4. 40.119 40.119 #> 5  5   x ~~   x    0     1     1    0     NA   1         .p5.  0.935  0.935 #> 6  6  ab := a*b    1     0     0    0     NA   0    ab         0.000  0.897 #>      se #> 1 0.431 #> 2 0.073 #> 3 3.471 #> 4 4.012 #> 5 0.000 #> 6 0.261 ind_lb <- ci_bound_wn_i(i = 6,                         npar = 4,                         sem_out = fit,                         f_constr = fn_constraint,                         which = \"lbound\",                         verbose = TRUE,                         ciperc = .95) ind_lb #> Target Parameter:    ab := a*b (group = 0, block = 0) #> Position:        6 #> Which Bound:     Lower Bound #> Method:          Wu-Neale-2012 #> Confidence Level:    0.95 #> Achieved Level:      0.95000000158432 #> Standardized:        No #> Likelihood-Based Bound:  0.42653 #> Wald Bound:      0.38491 #> Point Estimate:      0.89687 #> Ratio to Wald Bound: 0.9187 #>  #> -- Check -- #> Level achieved?      Yes (Difference: 1.5843e-09; Tolerance: 5e-04) #> Solution admissible? Yes #> Direction valid? Yes #>  #> -- Optimization Information -- #> Solver Status:       4 #> Convergence Message: NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached. #> Iterations:      11 #> Termination Conditions: #>  xtol_rel: 1e-05 #>  ftol_rel: 1e-05 #>  maxeval:  500 #>  #> -- Parameter Estimates -- #>              a        b     m~~m     y~~y #> Start  0.77753  0.49504 35.46538 40.17887 #> Final  0.86224  0.49467 35.32975 40.17929 #> Change 0.08471 -0.00036 -0.13563  0.00042 #>  #> Bound before check:  0.42653 #> Status Code:     0 #> Call: ci_bound_wn_i(i = 6, npar = 4, sem_out = fit, f_constr = fn_constraint,  #>     which = \"lbound\", ciperc = 0.95, verbose = TRUE) mod_chk <- \" m ~ a*x y ~ b*m ab := a*b ab ==  0.4265275 \" fit_chk <- sem(model = mod_chk,                data = dat) lavTestLRT(fit, fit_chk) #>  #> Chi-Squared Difference Test #>  #>         Df    AIC    BIC  Chisq Chisq diff   RMSEA Df diff Pr(>Chisq)   #> fit      1 2590.9 2604.1 10.549                                         #> fit_chk  2 2592.8 2602.7 14.390     3.8415 0.11919       1       0.05 . #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Internal Workflow of semlbci()","text":"vignette simplified version technical appendix hosted OSF project site Cheung & Pesigan (2023), associated package semlbci. presents workflow used ci_i_one() ci_bound_wn_i() find bound likelihood-based confidence interval (LBCI) parameter fitted lavaan model. ci_i_one() ci_bound_wn_i() internal functions used semlbci(). supposed used users. Nevertheless, developers can use directly desired.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"purposes-of-the-functions","dir":"Articles","previous_headings":"","what":"Purposes of the Functions","title":"Internal Workflow of semlbci()","text":"ci_i_one() called semlbci() confidence bound (limit), twice selected parameter, lower bound upper bound. sets necessary arguments call lowest level function responsible searching bound. Currently, one function available, ci_bound_wn_i(), implements algorithm proposed Wu & Neale (2012), adapted Pek & Wu (2015), without part handling parameters attainable bounds. avoid confusion method Wu & Neale (2012) parameters attainable bound, denote method WNPW (Wu-Neale-Pek-Wu) method document.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"overall-workflow","dir":"Articles","previous_headings":"","what":"Overall Workflow","title":"Internal Workflow of semlbci()","text":"first present overall workflow1 semlbci(). present workflow ci_i_one(), called semlbci() bound parameter requested (twice parameter, lower bound upper bound). Last, present workflows two stages ci_bound_wn_i(), minimization stage checking stage. Details arguments mentioned section can found help pages semlbci(), ci_i_one(), ci_bound_wn_i().","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"semlbci","dir":"Articles","previous_headings":"Overall Workflow","what":"semlbci()","title":"Internal Workflow of semlbci()","text":"semlbci() main function used users. used find LBCI selected parameters. also responsible setting equality constraint required WNPW method. robust LBCI proposed Falk (2018) requested, also compute scaling shift factors used robust likelihood ratio test Satorra (2000). general workflow semlbci() shown : General Workflow semlbci() describe two functions called semlbci() workflow, set_constraint() :scaling_factor3().","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"set_constraint","dir":"Articles","previous_headings":"Overall Workflow > semlbci()","what":"set_constraint()","title":"Internal Workflow of semlbci()","text":"function, called semlbci(), used set equality constraint used WNPW method. presented Pek & Wu (2015), find lower bound, \\(\\theta_L\\), 100(1-\\(\\alpha\\))% LBCI \\(\\hat{\\theta}_j\\), \\(\\theta_L\\) minimized respect parameters, \\((\\theta_L, \\boldsymbol{\\theta}_q)\\), \\(\\boldsymbol{\\theta_q}\\) parameters \\(\\theta_L\\), subject following constraint: \\[ 0 = 2nF(\\theta_L, \\boldsymbol{\\theta_q}) - (2nF(\\hat{\\theta}) + \\chi_{(1, 1 - \\alpha)}^2) \\] \\(F(\\hat{\\boldsymbol{\\theta}})\\) value discrepancy function evaluated ML estimate \\(\\hat{\\boldsymbol{\\theta}}\\). \\(\\chi_{(1, 1 - \\alpha)}^2\\) \\(\\chi^2\\) critical value \\(df = 1\\) level significance = \\(\\alpha\\) (3.84 \\(\\alpha = .05\\)), \\(n\\) sample size (total sample size multisample models). constraint means model \\(\\chi^2\\) difference test model \\(\\theta_j\\) fixed \\(\\theta_L\\) original model \\(\\theta_j\\) freely estimated p-value equal \\(\\alpha\\). lavaan, \\(F(\\theta_L, \\boldsymbol{\\theta}_q)\\) \"fmin\" output lavaan::fitMeasures(). estimator ML likelihood = \"normal\", default, multiplying \"fmin\" \\(2n\\) yields model \\(\\chi^2\\). find upper bound, \\(\\theta_U\\), \\(-\\theta_U\\) minimized (equivalently, \\(\\theta_U\\) maximized). final value multiplied \\(-1\\) get upper bound. WNPW method can easily used model one equality constraints parameters. constraints simply extracted lavaan object passed nloptr::nloptr(), function used minimization, along constraint WNPW method minimizing objective function. function set_constraint() returns general version constraint: \\[ 0 = 2nF(\\theta_L, \\boldsymbol{\\theta}_q) - (2nF(\\hat{\\boldsymbol{\\theta}}) + \\frac{\\chi_{(1, 1 - \\alpha)}^2 - b}{}) \\] general form, \\(\\) scaling factor \\(b\\) shift factor. \\(= 1\\) \\(b = 0\\), constraint WNPW method. robust LBCI requested, scaling shift factors computed way lavaan::lavTestLRT() method = satorra.2000 .method = \"exact\".2","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"semlbciscaling_factors3","dir":"Articles","previous_headings":"Overall Workflow > semlbci()","what":"semlbci:::scaling_factors3()","title":"Internal Workflow of semlbci()","text":"internal function, exported, computes scaling shift factors used lavaan::lavTestLRT() method = satorra.2000 .method = \"exact\". method proposed Falk (2018) robust LBCI. factors can used robust likelihood ratio test proposed Satorra (2000) without directly calling lavaan::lavTestLRT() minimization. factors depend parameter LBCI searched, can computed reused minimization. Since version 0.6-13 lavaan, lavaan::lavTestLRT() stores scaling shift factors output. Therefore, future versions semlbci, possible remove semlbci:::scaling_factor3() use lavaan::lavTestLRT() get scaling shift factors directly.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"ci_i_one","dir":"Articles","previous_headings":"Overall Workflow","what":"ci_i_one()","title":"Internal Workflow of semlbci()","text":"workflow ci_i_one() presented : General Workflow ci_i_one() job call ci_bound_wn_i() find bound LBCI parameter. check validity plausibility bound. lowest level function, ci_bound_wn_i(), responsible checks. something wrong, ci_bound_wn_i() set status non-zero value. argument try_k_more_times used determine whether try “harder” k times first attempt failed (e.g., status != 0, meaning bound found fails one checks).","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"ci_bound_wn_i","dir":"Articles","previous_headings":"Overall Workflow","what":"ci_bound_wn_i()","title":"Internal Workflow of semlbci()","text":"function ci_bound_wn_i() lowest level function responsible searching bound. implements optimization method (WNPW method case) takes care technical details. supposed used users interface designed user-friendly. Nevertheless, interested users can use directly find bound, bypassing semlbci(). Examples can found vignette(\"technical_searching_one_bound\", package = \"semlbci\"). workflow ci_bound_wn_i() can separated two stages, minimization stage checking stage.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"minimization-stage","dir":"Articles","previous_headings":"Overall Workflow > ci_bound_wn_i()","what":"Minimization Stage","title":"Internal Workflow of semlbci()","text":"workflow minimization stage presented : Workflow ci_bound_wn_i() - Minimization Stage","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"optimization-algorithm","dir":"Articles","previous_headings":"Overall Workflow > ci_bound_wn_i() > Minimization Stage","what":"Optimization Algorithm","title":"Internal Workflow of semlbci()","text":"function used minimization nloptr::nloptr(), using NLOPT_LD_SLSQP value algorithm. parameters (x0) free parameters model. objective function, eval_f set lbci_b_f(), function returns bound iteration. gradient function, eval_grad_f, lbci_b_grad(). equality constraint(s), eval_g_eq, result set_constraint(), supplied argument f_constr semlbci(), along equality constraints model, . two functions created ci_bound_wn_i() stage, lbci_b_f() lbci_b_grad(), described .","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"lbci_b_f","dir":"Articles","previous_headings":"","what":"Internal Workflow of semlbci()","title":"Internal Workflow of semlbci()","text":"WNPW method, parameter, \\(\\theta_j\\), free parameter, lower bound searched, function simply returns value \\(\\theta_j\\) (free parameters \\(\\theta_j\\) denoted \\(\\theta_q\\)): \\[ f(\\theta_j, \\boldsymbol{\\theta}_q) = \\theta_j \\] upper bound searched, function : \\[ f(\\theta_j, \\boldsymbol{\\theta}_q) = -\\theta_j \\] parameter function free parameters (e.g., indirect effect, standardized coefficient correlation), denoted \\(h(\\boldsymbol{\\theta})\\), \\(\\boldsymbol{\\theta}\\) free parameters (though may used \\(h\\)), lower bound searched, function : \\[ f(\\boldsymbol{\\theta}) = h(\\boldsymbol{\\theta}) \\] Similarly, upper bound searched, function : \\[ f(\\boldsymbol{\\theta}) = -h(\\boldsymbol{\\theta}) \\] Therefore, optimization, minimization conducted whether lower upper bound searched.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"lbci_b_grad","dir":"Articles","previous_headings":"","what":"Internal Workflow of semlbci()","title":"Internal Workflow of semlbci()","text":"gradient object function, lbci_b_f(), either precomputed (parameter bound searched parameter) computed lavaan::lav_func_gradient_complex().","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"tweaking-the-optimization","dir":"Articles","previous_headings":"Overall Workflow > ci_bound_wn_i() > Minimization Stage","what":"Tweaking the Optimization","title":"Internal Workflow of semlbci()","text":"first attempt optimization may fail, especially target parameter function free parameters (e.g., indirect effect, parameter standardized solution). arguments xtol_rel, ftol_rel, lb adjusted across attempts. done ci_i_one() second subsequent calls ci_bound_wn_i().","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"checking-stage","dir":"Articles","previous_headings":"Overall Workflow > ci_bound_wn_i()","what":"Checking Stage","title":"Internal Workflow of semlbci()","text":"workflow checking stage presented : Workflow ci_bound_wn_i() - Checking Stage following checks, order: status code nloptr::nloptr() equal 0 (“success”)? status code nloptr::nloptr() equal 0, status code ci_bound_wn_i() set 1. final solution, values free parameters result admissible solution? (Checked lavaan::lavInspect() = \"post.check\"). values parameters final solution used fit model, lavaan::lavInspect() called check solution. Examples inadmissible solution negative variances correlations greater one magnitude. solution admissible, status code ci_bound_wn_i() set 1. target parameter (free derived, .e., function parameters, indirect effect standardized regression coefficient) fixed bound found, p-value likelihood ratio test constrained model original model equal 1 - confidence level (.05 95% LBCI)? , likelihood-based confidence bound definition invalid. status code ci_bound_wn_i() set 1. check equivalent using lavaan::lavTestLRT(). robust LBCI requested, check equivalent using lavaan::lavTestLRT() method = satorra.2000 .method = \"exact\". bound set NA solution fails three checks presented , prevent users accidentally using bound may invalid. sum, bound returned, NA, following characteristics: Noted “success” optimization nloptr::nloptr(). values parameters yield inadmissible solution. bound definition valid.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"main-arguments","dir":"Articles","previous_headings":"","what":"Main Arguments","title":"Internal Workflow of semlbci()","text":"section presents details arguments used ci_i_one() ci_bound_wn_i().","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"ci_i_one-1","dir":"Articles","previous_headings":"Main Arguments","what":"ci_i_one()","title":"Internal Workflow of semlbci()","text":"ci_i_one() interface user functions semlbci() low level functions ci_bound_wn_i(). responsible setting necessary values used ci_bound_wn_i(). main arguments ci_i_one(): : position (row number) target parameters appeared parameter table output lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa(). uniquely identifies parameter, can free, fixed, user-defined. : Either \"lbound\" \"ubound\", denoting lower bound upper bound, respectively. confidence bound (limit) searched. sem_out: lavaan-class object. output lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa(). method: method used find confidence bound. Currently, modified Wu-Neale method presented Pek Wu (2015) supported (\"wn\"). Separating low level function function allows possibility develop low level functions methods, without need change interface implemented ci_i_one(). standardized: Logical. Whether confidence bound parameter standardized solution searched. example, covariance, whether covariance, correlation, used searching bound. Default FALSE. robust: Whether robust likelihood-based confidence bound searched, yes, method used. Currently support \"none\" (robust method used) \"satorra.2000\", proposed Falk (2018). sf_full: Used robust \"satorra.2000\". NA, scaling shift factors used likelihood ratio test computed internally. supplied, list two scalar elements, c_r c_rb, scaling factor shift factors. sf_args: robust \"satorra.2000\" sf_full NA, named list arguments passed semlbci:::scaling_factor3(), internal function computing scaling shift factors proposed Asparouhov & Muthén (2010). try_k_more_times: many times try status code zero. Default 0 semlbci() set argument 2 calling function. set integer greater zero, call low level function status code zero number additional calls attempted. successive call, values modified search using new settings.","code":""},{"path":"https://sfcheung.github.io/semlbci/articles/technical_workflow.html","id":"ci_bound_wn_i-1","dir":"Articles","previous_headings":"Main Arguments","what":"ci_bound_wn_i()","title":"Internal Workflow of semlbci()","text":"ci_bound_wn_i() low level function called ci_i_one(). function implements modified Wu-Neale method presented Pek & Wu (2015), named Wu-Neale-Pek-Wu (WNPW) method document. function supposed used users interface user-friendly. Interested users can refer vignette(\"technical_searching_one_bound\", package = \"semlbci\") see use ci_bound_wn_i() directly. main arguments ci_bound_wn_i(): : position (row number) target parameters appeared parameter table output lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa(). id uniquely identifies parameter, can free, fixed, user-defined. npar: number free parameters model, including constrained equal. supplied ci_i_one(). sem_out: lavaan-class object. output lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa(). f_constr: constraint function generated set_constraint(). Created semlbci() passed ci_i_one(). : Either \"lbound\" \"ubound\", denoting lower bound upper bound, respectively. confidence bound (limit) searched. perturbation_factor: number parameter estimates sem_out multiplied, set starting values, using parameter estimates starting values may lead errors first iterations. Default .90. argument ignored wald_ci_start, described , TRUE. lb_var: lower bound free parameters variances. equal -Inf, default, lb_prop lb_se_k, described , used set lower bounds free variances. number, used set lower bounds free variances. wald_ci_start: TRUE, equality constraints model, target parameter user-defined parameter, Wald delta confidence bounds used starting values. standardized: Logical. Whether confidence bound parameter standardized solution searched. example, covariance, whether covariance, correlation, used searching bound. Default FALSE. opts: named list options passed nloptr::nloptr(), function used optimization. Default list(). argument can used override internal settings used ci_bound_wn_i(). ciperc: intended coverage probability confidence interval. Default .95, bound 95% likelihood-based confidence interval sought. ci_limit_ratio_tol: tolerance ratio b, distance bound LBCI point estimate, b distance original confidence bound (default Wald delta CI lavaan::lavaan()) point estimate. ratio larger value smaller reciprocal value, warning set status code. Default 1.5. verbose: TRUE, function store diagnostic information attribute diag. Default FALSE. sf: scaling factor. Used robust confidence bounds. Default 1. Precomputed internal function called semlbci() ci_i_one() robust = \"satorra.2000\". sf2: shift factor. Used robust confidence bounds. Default 1. Precomputed internal function called semlbci() ci_i_one() robust = \"satorra.2000\". p_tol: tolerance checking achieved level confidence, , p-value likelihood ratio test original model model parameter fixed bound found. absolute difference achieved level ciperc greater number, warning set status code bound set NA. Default 5e-4. xtol_rel_factor: Multiply internal default value xtol_rel nloptr::nloptr() (1.0e-5) number, usually positive number equal less 1, change default termination criterion. Default 1. allows tweaking settings optimization without knowing internal default value. ftol_rel_factor: Multiply internal default value ftol_rel nloptr::nloptr() (1.0e-5) number, usually positive number equal less 1, change default termination criterion. Default 1. allows tweaking settings optimization without knowing internal default value. lb_prop: Used internal function set lower bound free variances. Default .05, setting lower bound (.05)(point estimate). Used lower bound set lb_se_k negative. constraint used optimization prevent intermediate values far away point estimates. final check done fitting model lavaan implement constraint. lb_se_k Used internal function set lower bound free variances. Default 3, estimate minus 3 \\(\\times\\) standard error. negative, lower bound set using lb_prop. constraint used optimization prevent intermediate values far away point estimates. final check done fitting model lavaan implement constraint. Please refer help page ci_bound_wn_i() learn arguments.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer. Ivan Jacob Agaloos Pesigan. Contributor.","code":""},{"path":"https://sfcheung.github.io/semlbci/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung SF, Pesigan IJA (2023). “semlbci: R package forming likelihood-based confidence intervals parameter estimates, correlations, indirect effects, derived parameters.” Structural Equation Modeling: Multidisciplinary Journal. ISSN 1070-5511, 1532-8007, doi:10.1080/10705511.2023.2183860, https://doi.org/10.1080/10705511.2023.2183860.","code":"@Article{,   title = {semlbci: An R package for forming likelihood-based confidence intervals for parameter estimates, correlations, indirect effects, and other derived parameters.},   issn = {1070-5511, 1532-8007},   url = {https://doi.org/10.1080/10705511.2023.2183860},   doi = {10.1080/10705511.2023.2183860},   language = {en},   journal = {Structural Equation Modeling: A Multidisciplinary Journal},   author = {S. F. Cheung and I. J. A. Pesigan},   year = {2023}, }"},{"path":"https://sfcheung.github.io/semlbci/index.html","id":"semlbci-","dir":"","previous_headings":"","what":"Likelihood-Based Confidence Interval in Structural Equation Models","title":"Likelihood-Based Confidence Interval in Structural Equation Models","text":"package includes functions forming likelihood-based confidence intervals (LBCIs) parameters structural equation modeling. also supports robust LBCI proposed Falk (2018). described following manuscript: Cheung, S. F., & Pesigan, . J. . (2023). semlbci: R package forming likelihood-based confidence intervals parameter estimates, correlations, indirect effects, derived parameters. Structural Equation Modeling: Multidisciplinary Journal. Advance online publication. https://doi.org/10.1080/10705511.2023.2183860 information package: https://sfcheung.github.io/semlbci/","code":""},{"path":"https://sfcheung.github.io/semlbci/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Likelihood-Based Confidence Interval in Structural Equation Models","text":"stable CRAN version can installed install.packages(): latest version GitHub can installed remotes::install_github():","code":"install.packages(\"semlbci\") remotes::install_github(\"sfcheung/semlbci\")"},{"path":"https://sfcheung.github.io/semlbci/index.html","id":"how-to-use-it","dir":"","previous_headings":"","what":"How To Use It","title":"Likelihood-Based Confidence Interval in Structural Equation Models","text":"Illustration examples can found Get Started guide (vignette(\"semlbci\", package = \"semlbci\")).","code":""},{"path":"https://sfcheung.github.io/semlbci/index.html","id":"implementation","dir":"","previous_headings":"","what":"Implementation","title":"Likelihood-Based Confidence Interval in Structural Equation Models","text":"currently implements algorithm illustrated Pek Wu (2018), adapted Wu Neale (2012) without adjustment parameters attainable bounds. also supports robust LBCI proposed Falk (2018). implementation can found technical appendices.","code":""},{"path":"https://sfcheung.github.io/semlbci/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Likelihood-Based Confidence Interval in Structural Equation Models","text":"Cheung, S. F., & Pesigan, . J. . (2023). semlbci: R package forming likelihood-based confidence intervals parameter estimates, correlations, indirect effects, derived parameters. Structural Equation Modeling: Multidisciplinary Journal. Advance online publication. https://doi.org/10.1080/10705511.2023.2183860 Falk, C. F. (2018). robust standard errors best approach interval estimation nonnormal data structural equation modeling? Structural Equation Modeling: Multidisciplinary Journal, 25(2), 244-266. https://doi.org/10.1080/10705511.2017.1367254 Pek, J., & Wu, H. (2015). Profile likelihood-based confidence intervals regions structural equation models. Psychometrika, 80(4), 1123-1145. https://doi.org/10.1007/s11336-015-9461-1 Wu, H., & Neale, M. C. (2012). Adjusted confidence intervals bounded parameter. Behavior Genetics, 42(6), 886-898. https://doi.org/10.1007/s10519-012-9560-z","code":""},{"path":"https://sfcheung.github.io/semlbci/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Likelihood-Based Confidence Interval in Structural Equation Models","text":"suggestions found bugs limitations, please feel feel open GitHub issue. Thanks. https://github.com/sfcheung/semlbci/issues","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_evar_near_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset (CFA, Two Factors, One Standardized Error Variance\nClose to Zero) — cfa_evar_near_zero","title":"Dataset (CFA, Two Factors, One Standardized Error Variance\nClose to Zero) — cfa_evar_near_zero","text":"Generated two-factor model, one standardized error variance close zero.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_evar_near_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset (CFA, Two Factors, One Standardized Error Variance\nClose to Zero) — cfa_evar_near_zero","text":"","code":"cfa_evar_near_zero"},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_evar_near_zero.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset (CFA, Two Factors, One Standardized Error Variance\nClose to Zero) — cfa_evar_near_zero","text":"data frame 120 rows six variables, x1 x6","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_evar_near_zero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset (CFA, Two Factors, One Standardized Error Variance\nClose to Zero) — cfa_evar_near_zero","text":"model used examples like one:","code":"# If fitted by the following model, the standardized # error variance of `x3` is close to zero. # Consequently, the R-square of `x3` is close to one:  library(lavaan) mod <- \"f1 =~ x1 + x2 + x3         f2 =~ x4 + x5 + x6\" fit <- cfa(mod, cfa_evar_near_zero) summary(fit, standardized = TRUE, rsquare = TRUE)"},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_evar_near_zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset (CFA, Two Factors, One Standardized Error Variance\nClose to Zero) — cfa_evar_near_zero","text":"","code":"print(head(cfa_evar_near_zero), digits = 3) #>       x1      x2      x3     x4    x5     x6 #> 1  3.750  1.3970  6.3719 -0.602  2.04 -0.363 #> 2 -1.789 -1.3930 -1.2493 -2.550 -1.52 -3.492 #> 3  1.257 -3.3515 -2.1210 -3.071 -0.94 -1.437 #> 4 -0.403 -0.1972  0.0288  0.899  2.03 -2.030 #> 5 -0.643 -0.9646 -2.3602  0.377 -2.09 -0.186 #> 6 -1.771  0.0562 -0.5200  0.311  2.13 -3.931 nrow(cfa_evar_near_zero) #> [1] 120"},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset (CFA, Two Factors, Six Variables) — cfa_two_factors","title":"Dataset (CFA, Two Factors, Six Variables) — cfa_two_factors","text":"Generated two-factor model six variables, n = 500","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset (CFA, Two Factors, Six Variables) — cfa_two_factors","text":"","code":"cfa_two_factors"},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset (CFA, Two Factors, Six Variables) — cfa_two_factors","text":"data frame 500 rows six variables, x1 x6.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset (CFA, Two Factors, Six Variables) — cfa_two_factors","text":"model used examples like one:","code":"library(lavaan) mod <- \"f1 =~ x1 + x2 + x3         f2 =~ x4 + x5 + x6\" fit <- cfa(mod, cfa_two_factors) summary(fit)"},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset (CFA, Two Factors, Six Variables) — cfa_two_factors","text":"","code":"print(head(cfa_two_factors), digits = 3) #>       x1     x2     x3    x4     x5     x6 #> 1 -0.445  1.606  4.199 -0.61  2.437  0.393 #> 2 -2.342 -3.404 -3.066 -0.81  0.245 -2.139 #> 3 -2.033 -0.355  1.142  1.71 -0.722  1.491 #> 4  1.204 -0.234  0.858 -2.05 -2.322 -1.038 #> 5  2.161  0.890  3.437  4.74  0.765  4.522 #> 6  3.482  2.014  0.870 -2.51  0.487 -0.553 nrow(cfa_two_factors) #> [1] 500"},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors_mg.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset (CFA, Two Factors, Six Variables, Two Groups) — cfa_two_factors_mg","title":"Dataset (CFA, Two Factors, Six Variables, Two Groups) — cfa_two_factors_mg","text":"Generated two-factor model six variables, n = 500, two groups, n = 250 .","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors_mg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset (CFA, Two Factors, Six Variables, Two Groups) — cfa_two_factors_mg","text":"","code":"cfa_two_factors_mg"},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors_mg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset (CFA, Two Factors, Six Variables, Two Groups) — cfa_two_factors_mg","text":"data frame 500 rows, one grouping variable, gp, six variables, x1 x6.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors_mg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset (CFA, Two Factors, Six Variables, Two Groups) — cfa_two_factors_mg","text":"model used examples like one:","code":"library(lavaan) mod <- \"f1 =~ x1 + x2 + x3         f2 =~ x4 + x5 + x6\" fit <- cfa(mod, cfa_two_factors_mg, group = \"gp\") summary(fit)"},{"path":"https://sfcheung.github.io/semlbci/reference/cfa_two_factors_mg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset (CFA, Two Factors, Six Variables, Two Groups) — cfa_two_factors_mg","text":"","code":"print(head(cfa_two_factors_mg), digits = 3) #>    gp     x1     x2     x3    x4     x5     x6 #> 1 gp1 -0.445  1.606  4.199 -0.61  2.437  0.393 #> 2 gp1 -2.342 -3.404 -3.066 -0.81  0.245 -2.139 #> 3 gp1 -2.033 -0.355  1.142  1.71 -0.722  1.491 #> 4 gp1  1.204 -0.234  0.858 -2.05 -2.322 -1.038 #> 5 gp1  2.161  0.890  3.437  4.74  0.765  4.522 #> 6 gp1  3.482  2.014  0.870 -2.51  0.487 -0.553 nrow(cfa_two_factors_mg) #> [1] 500 table(cfa_two_factors_mg$gp) #>  #> gp1 gp2  #> 250 250"},{"path":"https://sfcheung.github.io/semlbci/reference/check_sem_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-analysis Check For 'semlbci' — check_sem_out","title":"Pre-analysis Check For 'semlbci' — check_sem_out","text":"Check output passed semlbci()","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/check_sem_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-analysis Check For 'semlbci' — check_sem_out","text":"","code":"check_sem_out(   sem_out,   robust = c(\"none\", \"satorra.2000\"),   multigroup_ok = TRUE )"},{"path":"https://sfcheung.github.io/semlbci/reference/check_sem_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-analysis Check For 'semlbci' — check_sem_out","text":"sem_out output SEM analysis. Currently supports lavaan::lavaan object. robust Whether LBCI based robust likelihood ratio test found. \"satorra.2000\" lavaan::lavTestLRT() supported now. \"none\", default, likelihood ratio test based maximum likelihood estimation used. multigroup_ok TRUE, check whether model multiple-group model. Default TRUE.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/check_sem_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-analysis Check For 'semlbci' — check_sem_out","text":"numeric vector one element. 0, model estimation method officially supported. larger zero, model method officially supported users can still try use semlbci() risks. less zero, model /method officially supported. attributes info contains reason value zero.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/check_sem_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-analysis Check For 'semlbci' — check_sem_out","text":"checks whether model estimation method sem_out object passed semlbci() supported current version semlbci(). function used semlbci() exported compatibility SEM output can checked directly. Estimation methods (estimator lavaan::lavaan()) currently supported: Maximum likelihood (ML) variants (e.g., MLM, MLR). methods robust test statistics (e.g., MLR), robust LBCIs (robust = \"satorra.2000\" calling semlbci()) can requested. Estimation methods yet supported: Generalized least squares (GLS). Weighted least squares (.k.. asymptotically distribution free) (WLS) variants (e.g., WLSMV). Unweighted least squares (ULS). Diagonally weighted least squares (DWLS). methods listed. Models supported: Single-group models continuous variables. Multiple-group models continuous variables. Models tested: Models categorical variables. Models yet supported: Models formative factors. Multilevel models.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/check_sem_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-analysis Check For 'semlbci' — check_sem_out","text":"","code":"library(lavaan) #> This is lavaan 0.6-15 #> lavaan is FREE software! Please report any bugs. data(cfa_two_factors) mod <- \" f1 =~ x1 + x2 + x3 f2 =~ x4 + x5 + x6 \"  fit <- sem(mod, cfa_two_factors)  # Should be 0 check_sem_out(fit) #> [1] 0  fit2 <- sem(mod, cfa_two_factors, estimator = \"DWLS\")  # Should be negative because DWLS is officially not supported check_sem_out(fit2) #> [1] -2 #> attr(,\"info\") #> [1] \"Estimator DWLS is not yet supported.\"                        #> [2] \"Only support models fitted with likelihood set to 'normal'.\"  fit3 <- sem(mod, cfa_two_factors, estimator = \"MLR\")  # Should be negative because MLR is supported only if # robust is set to \"satorra.2000\" check_sem_out(fit3) #> [1] -1 #> attr(,\"info\") #> [1] \"Test method(s) yuan.bentler.mplus is/are not yet supported when 'robust' is 'none'.\"  # Should be zero because robust is set to \"satorra.2000\" check_sem_out(fit3, robust = \"satorra.2000\") #> [1] 0"},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"Find lower upper bound likelihood-based confidence interval (LBCI) one parameter structural equation model fitted lavaan::lavaan().","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"","code":"ci_bound_wn_i(   i = NULL,   npar = NULL,   sem_out = NULL,   f_constr = NULL,   which = NULL,   history = FALSE,   perturbation_factor = 0.9,   lb_var = -Inf,   standardized = FALSE,   wald_ci_start = !standardized,   opts = list(),   ciperc = 0.95,   ci_limit_ratio_tol = 1.5,   verbose = FALSE,   sf = 1,   sf2 = 0,   p_tol = 5e-04,   std_method = \"internal\",   bounds = \"none\",   xtol_rel_factor = 1,   ftol_rel_factor = 1,   lb_prop = 0.05,   lb_se_k = 3,   ... )"},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"position target parameter appeared parameter table lavaan object, generated lavaan::parameterTable(). npar number free parameters, including constrained equal. sem_out fit object. Currently supports lavaan::lavaan objects . f_constr constraint function generated set_constraint(). Whether lower bound upper bound found. Must \"lbound\" \"ubound\". history used. Kept backward compatibility. perturbation_factor number multiplied parameter estimates sem_out. Using parameter estimates starting values may lead errors first iterations. Default .90. argument ignored wald_ci_start `TRUE. lb_var lower bound free parameters variances. equal -Inf, default, lb_prop lb_se_k used set lower bounds free variances. number, used set lower bounds free variances. standardized TRUE, LBCI requested estimate standardized solution. Default FALSE. wald_ci_start TRUE, equality constraints model, target parameter user-defined parameter, Wald confidence bounds used starting value. opts Options passed nloptr::nloptr(), current optimizer. Default list(). ciperc intended coverage probability confidence interval. Default .95, bound 95% confidence interval sought. ci_limit_ratio_tol tolerance ratio b, distance LBCI limit point estimate, b distance original confidence limit (default Wald CI lavaan::lavaan()) point estimate. ratio larger value smaller reciprocal value, warning set status code. Default 1.5. verbose TRUE, function store diagnostic information attribute diag. Default FALSE. sf scaling factor. Used robust confidence bounds. Default 1. Computed internal function called semlbci() robust = \"satorra.2000\". sf2 shift factor. Used robust confidence bounds. Default 0. Computed internal function called semlbci() robust = \"satorra.2000\". p_tol Tolerance checking achieved level confidence. absolute difference achieved level ciperc greater amount, warning set status code bound set NA. Default 5e-4. std_method method used find standardized solution. equal \"lavaan\"``, [lavaan::standardizedSolution()] used. equal \"internal\", internal function used. \"lavaan\"method work situations, \"internal\"method usually much faster. Default \"internal\"`. bounds Default \"\" function set lower bounds lb_var variances. valid values accepted lavaan::lavaan(). Ignored now. xtol_rel_factor Multiply default xtol_rel number, usually positive number equal less 1, change default termination criterion. Default 1. ftol_rel_factor Multiply default ftol_rel number, usually positive number equal less 1, change default termination criterion. Default 1. lb_prop Used internal function set lower bound free variances. Default .05, setting lower bound .05 * estimate. Used lower bound set lb_se_k negative. lb_se_k Used internal function set lower bound free variances. Default 3, estimate minus 3 standard error. negative, lower bound set using lb_prop. ... Optional arguments. used.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"cibound-class object list three elements: bound: single number. value bound located. NA search failed various reasons. diag: list diagnostic information. call: original call. detailed organized output can printed default print method (print.cibound()).","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"important-notice","dir":"Reference","previous_headings":"","what":"Important Notice","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"function supposed used directly users typical scenarios. interface user-unfriendly used semlbci(). exported interested users can examine confidence bound found, use experiments simulations.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"function lowest level function used semlbci(). semlbci() calls function bound parameter. use , set_constraint() needs called first create equality constraint required algorithm proposed Wu Neale (2012).","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"algorithm","dir":"Reference","previous_headings":"","what":"Algorithm","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"function implements algorithm presented Wu Neale (2012; see also Pek & Wu, 2015, Equation 12) estimates free parameters optimization.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"limitation-s-","dir":"Reference","previous_headings":"","what":"Limitation(s)","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"function yet implement method Wu Neale (2012) estimate close attainable bound.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"Pek, J., & Wu, H. (2015). Profile likelihood-based confidence intervals regions structural equation models. Psychometrika, 80(4), 1123-1145. doi:10.1007/s11336-015-9461-1 Wu, H., & Neale, M. C. (2012). Adjusted confidence intervals bounded parameter. Behavior Genetics, 42(6), 886-898. doi:10.1007/s10519-012-9560-z","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/ci_bound_wn_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood-based Confidence Bound For One parameter — ci_bound_wn_i","text":"","code":"data(simple_med) dat <- simple_med  mod <- \" m ~ x y ~ m \"  fit_med <- lavaan::sem(mod, simple_med, fixed.x = FALSE)  fn_constr0 <- set_constraint(fit_med)  out1l <- ci_bound_wn_i(i = 1,                        npar = 5,                        sem_out = fit_med,                        f_constr = fn_constr0,                        which = \"lbound\") out1l #> Target Parameter:\tm ~ x (group = 1, block = 1) #> Position:\t\t1 #> Which Bound:\t\tLower Bound #> Method:\t\t\tWu-Neale-2012 #> Confidence Level:\t0.95 #> Achieved Level:\t\t0.950000000054991 #> Standardized:\t\tNo #> Likelihood-Based Bound:\t0.8277 #> Wald Bound:\t\t0.83177 #> Point Estimate:\t\t1.67613 #> Ratio to Wald Bound:\t1.00482 #>  #> -- Check -- #> Level achieved?\t\tYes (Difference: 5.4991e-11; Tolerance: 5e-04) #> Solution admissible?\tYes #> Direction valid?\tYes #>  #> -- Optimization Information -- #> Solver Status:\t\t4 #> Convergence Message:\tNLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached. #> Iterations:\t\t3 #> Termination Conditions: #> \txtol_rel: 1e-05 #> \tftol_rel: 1e-05 #> \tmaxeval:  500 #>  #> -- Parameter Estimates -- #>             m~x     y~m     m~~m     y~~y    x~~x #> Start   0.83177 0.53508 35.37699 40.11896 0.93513 #> Final   0.82770 0.53508 35.37711 40.11896 0.93513 #> Change -0.00407 0.00000  0.00011  0.00000 0.00000 #>  #> Bound before check:\t0.8277 #> Status Code:\t\t0 #> Call: ci_bound_wn_i(i = 1, npar = 5, sem_out = fit_med, f_constr = fn_constr0,  #>     which = \"lbound\") #>"},{"path":"https://sfcheung.github.io/semlbci/reference/ci_i_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood-Based Confidence Bound for One Parameter — ci_i_one","title":"Likelihood-Based Confidence Bound for One Parameter — ci_i_one","text":"Find likelihood-based confidence bound one parameter.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_i_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood-Based Confidence Bound for One Parameter — ci_i_one","text":"","code":"ci_i_one(   i,   which = NULL,   sem_out,   method = \"wn\",   standardized = FALSE,   robust = \"none\",   sf_full = NA,   sf_args = list(),   sem_out_name = NULL,   try_k_more_times = 0,   ... )"},{"path":"https://sfcheung.github.io/semlbci/reference/ci_i_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood-Based Confidence Bound for One Parameter — ci_i_one","text":"position (row number) target parameters appeared parameter table lavaan::lavaan object. Whether lower bound upper bound found. Must \"lbound\" \"ubound\". sem_out SEM output. Currently supports lavaan::lavaan outputs . method approach used. Default \"wn\" (Wu-Neale-2012 Method), supported method. standardized Logical. Whether bound LBCI standardized solution searched. Default FALSE. robust Whether LBCI based robust likelihood ratio test found. \"satorra.2000\" lavaan::lavTestLRT() supported now. `\"none\"``, default, likelihood ratio test based maximum likelihood estimation used. sf_full list scaling shift factors. Ignored robust \"none\". robust \"satorra.2000\" sf_full supplied, value used. robust \"satorra.2000\" sf_full NA, scaling factors computed internally. sf_args list arguments used computing scaling factors robust \"satorra.2000\". Used semlbci(). Ignored robust \"satorra.2000\". sem_out_name name object supplied sem_out. NULL default. Originally used internal functions. longer used current version kept backward compatibility. try_k_more_times many times try status code zero. Default 0. ... Arguments passed function corresponds requested method (ci_bound_wn_i() \"wn\").","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_i_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood-Based Confidence Bound for One Parameter — ci_i_one","text":"list following elements. bound: bound located. NA search failed. diags: Diagnostic information. method: Method used. Currently \"wn\" possible value. times: Total time used search. sf_full: scaling shift factors used. ci_bound_i_out: original output ci_bound_wn_i(). attempt_lb_var: many attempts used reduce lower bounds free variances. attempt_more_times: many additional attempts used search bounds. Controlled try_k_more_times.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/ci_i_one.html","id":"important-notice","dir":"Reference","previous_headings":"","what":"Important Notice","title":"Likelihood-Based Confidence Bound for One Parameter — ci_i_one","text":"function supposed used directly users typical scenarios. interface user-unfriendly used semlbci(). exported interested users can examine confidence bound found, use experiments simulations.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_i_one.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood-Based Confidence Bound for One Parameter — ci_i_one","text":"ci_i_one() link semlbci() lowest level function (currently ci_bound_wn_i()). called semlbci() find bound parameter, ci_i_one() calls function (ci_bound_wn_i() default) one times find bound (limit) likelihood-based confidence interval.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/ci_i_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood-Based Confidence Bound for One Parameter — ci_i_one","text":"","code":"data(simple_med)  library(lavaan) mod <- \" m ~ x y ~ m \" fit_med <- lavaan::sem(mod, simple_med, fixed.x = FALSE)  parameterTable(fit_med) #>   id lhs op rhs user block group free ustart exo label plabel  start    est #> 1  1   m  ~   x    1     1     1    1     NA   0         .p1.  1.676  1.676 #> 2  2   y  ~   m    1     1     1    2     NA   0         .p2.  0.535  0.535 #> 3  3   m ~~   m    0     1     1    3     NA   0         .p3. 34.710 34.710 #> 4  4   y ~~   y    0     1     1    4     NA   0         .p4. 40.119 40.119 #> 5  5   x ~~   x    0     1     1    5     NA   0         .p5.  0.935  0.935 #>      se #> 1 0.431 #> 2 0.073 #> 3 3.471 #> 4 4.012 #> 5 0.094  # Find the LBCI for the first parameter # The method \"wn\" needs the constraint function. # Use set_constraint() to generate this function: fn_constr0 <- set_constraint(fit_med)  # Call ci_i to find the bound, the lower bound in this example. # The constraint function, assigned to f_constr, is passed # to ci_bound_wn_i(). # npar is an argument for ci_bound_wn_i(). out <- ci_i_one(i = 1,                 which = \"lbound\",                 sem_out = fit_med,                 npar = 5,                 f_constr = fn_constr0) out$bounds #>   lbound  #> 0.827702"},{"path":"https://sfcheung.github.io/semlbci/reference/ci_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Check The Order of Bounds in a List of semlbci\nObjects — ci_order","title":"Check The Order of Bounds in a List of semlbci\nObjects — ci_order","text":"Check whether LBCIs list semlbci-class objects consistent levels confidence.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check The Order of Bounds in a List of semlbci\nObjects — ci_order","text":"","code":"ci_order(semlbci_list)  # S3 method for ci_order print(x, digits = 3, ...)"},{"path":"https://sfcheung.github.io/semlbci/reference/ci_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check The Order of Bounds in a List of semlbci\nObjects — ci_order","text":"semlbci_list object class semlbci_list, output nearby_levels(). x output ci_order(). digits number decimal places printout. ... Additional arguments. used.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check The Order of Bounds in a List of semlbci\nObjects — ci_order","text":"ci_order-class object print method print.ci_order(). number rows equal number parameters semlbci_list, columns stores confidence limits list, ordered according level confidence. x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_order.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Check The Order of Bounds in a List of semlbci\nObjects — ci_order","text":"print(ci_order): print method output ci_order().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/ci_order.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check The Order of Bounds in a List of semlbci\nObjects — ci_order","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/ci_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check The Order of Bounds in a List of semlbci\nObjects — ci_order","text":"","code":"library(lavaan) mod <- \" m ~ x y ~ m \" fit_med <- sem(mod, simple_med, fixed.x = FALSE) lbci_fit <- semlbci(fit_med) lbci_fit_nb <- nearby_levels(lbci_fit,                              ciperc_levels = c(-.050, .050))  # Check the order of the confidence bounds. # A confidence interval with a higher level of confidence # should enclose a confidence interval with # a lower level of confidence. ci_order(lbci_fit_nb) #>     lb_0.99 lb_0.95  lb_0.9  ub_0.9 ub_0.95 ub_0.99 Order #> m~x   0.557 < 0.828 ! 0.965 < 2.387 ! 2.525 < 2.795    OK #> y~m   0.345 < 0.391 ! 0.414 < 0.656 ! 0.679 < 0.725    OK"},{"path":"https://sfcheung.github.io/semlbci/reference/confint.semlbci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for a 'smelbci' Object — confint.semlbci","title":"Confidence Intervals for a 'smelbci' Object — confint.semlbci","text":"Return confidence intervals parameters output semlbci().","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/confint.semlbci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for a 'smelbci' Object — confint.semlbci","text":"","code":"# S3 method for semlbci confint(object, parm, level = 0.95, ...)"},{"path":"https://sfcheung.github.io/semlbci/reference/confint.semlbci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for a 'smelbci' Object — confint.semlbci","text":"object output semlbci(). parm parameters confidence intervals returned. used parameters defined three columns (lhs, op, rhs, group multisample models). level Ignored. level confidence determined calling semlbci() changed. ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/confint.semlbci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for a 'smelbci' Object — confint.semlbci","text":"two-column matrix confidence intervals.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/confint.semlbci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Intervals for a 'smelbci' Object — confint.semlbci","text":"returns likelihood-based confidence intervals output semlbci().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/confint.semlbci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals for a 'smelbci' Object — confint.semlbci","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/confint.semlbci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for a 'smelbci' Object — confint.semlbci","text":"","code":"library(lavaan) mod <- \" m ~ a*x y ~ b*m ab := a * b \" fit_med <- sem(mod, simple_med, fixed.x = FALSE) p_table <- parameterTable(fit_med) p_table #>   id lhs op rhs user block group free ustart exo label plabel  start    est #> 1  1   m  ~   x    1     1     1    1     NA   0     a   .p1.  1.676  1.676 #> 2  2   y  ~   m    1     1     1    2     NA   0     b   .p2.  0.535  0.535 #> 3  3   m ~~   m    0     1     1    3     NA   0         .p3. 34.710 34.710 #> 4  4   y ~~   y    0     1     1    4     NA   0         .p4. 40.119 40.119 #> 5  5   x ~~   x    0     1     1    5     NA   0         .p5.  0.935  0.935 #> 6  6  ab := a*b    1     0     0    0     NA   0    ab         0.000  0.897 #>      se #> 1 0.431 #> 2 0.073 #> 3 3.471 #> 4 4.012 #> 5 0.094 #> 6 0.261 lbci_med <- semlbci(fit_med,                     pars = \"ab :=\") lbci_med #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 6  6  ab := a*b    ab 0.897   0.427   1.464 0.385 1.409 0.950 0.950 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #>  #> Call: #> semlbci(sem_out = fit_med, pars = \"ab :=\")  confint(lbci_med) #>        2.5 %   97.5 % #> ab 0.4265275 1.464037"},{"path":"https://sfcheung.github.io/semlbci/reference/get_cibound.html","id":null,"dir":"Reference","previous_headings":"","what":"A 'cibound' Output From a 'semlbci' Object — get_cibound","title":"A 'cibound' Output From a 'semlbci' Object — get_cibound","text":"Get cibound output bound semlbci object, output semlbci().","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/get_cibound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A 'cibound' Output From a 'semlbci' Object — get_cibound","text":"","code":"get_cibound(x, row_id, which = c(\"lbound\", \"ubound\"))"},{"path":"https://sfcheung.github.io/semlbci/reference/get_cibound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A 'cibound' Output From a 'semlbci' Object — get_cibound","text":"x output semlbci(). row_id row number x. number left, actual row number, rows may omitted printout x. bound ci_bound_wn_i() extracted. Either \"lbound\"`` \"ubound\"``.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/get_cibound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A 'cibound' Output From a 'semlbci' Object — get_cibound","text":"cibound-class object. See ci_bound_wn_i() details.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/get_cibound.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A 'cibound' Output From a 'semlbci' Object — get_cibound","text":"returns original output ci_bound_wn_i() bound. Usually diagnosis.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/get_cibound.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A 'cibound' Output From a 'semlbci' Object — get_cibound","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/get_cibound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A 'cibound' Output From a 'semlbci' Object — get_cibound","text":"","code":"library(lavaan) mod <- \" m ~ a*x y ~ b*m ab := a * b \" fit_med <- sem(mod, simple_med, fixed.x = FALSE) p_table <- parameterTable(fit_med) p_table #>   id lhs op rhs user block group free ustart exo label plabel  start    est #> 1  1   m  ~   x    1     1     1    1     NA   0     a   .p1.  1.676  1.676 #> 2  2   y  ~   m    1     1     1    2     NA   0     b   .p2.  0.535  0.535 #> 3  3   m ~~   m    0     1     1    3     NA   0         .p3. 34.710 34.710 #> 4  4   y ~~   y    0     1     1    4     NA   0         .p4. 40.119 40.119 #> 5  5   x ~~   x    0     1     1    5     NA   0         .p5.  0.935  0.935 #> 6  6  ab := a*b    1     0     0    0     NA   0    ab         0.000  0.897 #>      se #> 1 0.431 #> 2 0.073 #> 3 3.471 #> 4 4.012 #> 5 0.094 #> 6 0.261 lbci_med <- semlbci(fit_med,                     pars = c(\"ab :=\")) lbci_med #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 6  6  ab := a*b    ab 0.897   0.427   1.464 0.385 1.409 0.950 0.950 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #>  #> Call: #> semlbci(sem_out = fit_med, pars = c(\"ab :=\"))  # Get the output of ci_bound_wn_i() of the lower # bound of the LBCI for the indirect effect: get_cibound(lbci_med, row_id = 6, which = \"lbound\") #> Target Parameter:\tab := a*b (group = 0, block = 0) #> Position:\t\t6 #> Which Bound:\t\tLower Bound #> Method:\t\t\tWu-Neale-2012 #> Confidence Level:\t0.95 #> Achieved Level:\t\t0.95000000158433 #> Standardized:\t\tNo #> Likelihood-Based Bound:\t0.42653 #> Wald Bound:\t\t0.38491 #> Point Estimate:\t\t0.89687 #> Ratio to Wald Bound:\t0.9187 #>  #> -- Check -- #> Level achieved?\t\tYes (Difference: 1.5843e-09; Tolerance: 5e-04) #> Solution admissible?\tYes #> Direction valid?\tYes #>  #> -- Optimization Information -- #> Solver Status:\t\t4 #> Convergence Message:\tNLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached. #> Iterations:\t\t11 #> Termination Conditions: #> \txtol_rel: 1e-05 #> \tftol_rel: 1e-05 #> \tmaxeval:  500 #>  #> -- Parameter Estimates -- #>              a        b     m~~m     y~~y    x~~x #> Start  0.77753  0.49504 35.46538 40.17887 0.93513 #> Final  0.86224  0.49467 35.32975 40.17929 0.93513 #> Change 0.08471 -0.00036 -0.13563  0.00042 0.00000 #>  #> Bound before check:\t0.42653 #> Status Code:\t\t0 #> Call: ci_bound_wn_i(i = i, npar = 5L, sem_out = sem_out, f_constr = \"<not printed>\",  #>     which = which, standardized = standardized, wald_ci_start = wald_ci_start,  #>     ciperc = 0.95, sf = sf, sf2 = sf2, std_method = std_method_i,  #>     debug = FALSE) #>   # Get the output of ci_bound_wn_i() of the upper # bound of the LBCI for the indirect effect: get_cibound(lbci_med, row_id = 6, which = \"ubound\") #> Target Parameter:\tab := a*b (group = 0, block = 0) #> Position:\t\t6 #> Which Bound:\t\tUpper Bound #> Method:\t\t\tWu-Neale-2012 #> Confidence Level:\t0.95 #> Achieved Level:\t\t0.950000073477154 #> Standardized:\t\tNo #> Likelihood-Based Bound:\t1.46404 #> Wald Bound:\t\t1.40883 #> Point Estimate:\t\t0.89687 #> Ratio to Wald Bound:\t1.10784 #>  #> -- Check -- #> Level achieved?\t\tYes (Difference: 7.3477e-08; Tolerance: 5e-04) #> Solution admissible?\tYes #> Direction valid?\tYes #>  #> -- Optimization Information -- #> Solver Status:\t\t3 #> Convergence Message:\tNLOPT_FTOL_REACHED: Optimization stopped because ftol_rel or ftol_abs (above) was reached. #> Iterations:\t\t6 #> Termination Conditions: #> \txtol_rel: 1e-05 #> \tftol_rel: 1e-05 #> \tmaxeval:  500 #>  #> -- Parameter Estimates -- #>              a       b     m~~m     y~~y    x~~x #> Start  2.32329 0.60639 35.10196 40.30883 0.93513 #> Final  2.38407 0.61409 35.10928 40.31234 0.93513 #> Change 0.06077 0.00770  0.00732  0.00352 0.00000 #>  #> Bound before check:\t1.46404 #> Status Code:\t\t0 #> Call: ci_bound_wn_i(i = i, npar = 5L, sem_out = sem_out, f_constr = \"<not printed>\",  #>     which = which, standardized = standardized, wald_ci_start = wald_ci_start,  #>     ciperc = 0.95, sf = sf, sf2 = sf2, std_method = std_method_i,  #>     debug = FALSE) #>"},{"path":"https://sfcheung.github.io/semlbci/reference/loglikelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Profile likelihood of a Parameter — loglike_compare","title":"Log Profile likelihood of a Parameter — loglike_compare","text":"functions compute log profile likelihood parameter fixed value range values","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/loglikelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Profile likelihood of a Parameter — loglike_compare","text":"","code":"loglike_compare(   sem_out,   semlbci_out = NULL,   par_i,   confidence = 0.95,   n_points = 21,   start = \"default\",   try_k_more = 5,   parallel = FALSE,   ncpus = parallel::detectCores(logical = FALSE) - 1,   use_pbapply = TRUE )  loglike_range(   sem_out,   par_i,   confidence = 0.95,   n_points = 21,   interval = NULL,   verbose = FALSE,   start = \"default\",   try_k_more = 5,   parallel = FALSE,   ncpus = parallel::detectCores(logical = FALSE) - 1,   use_pbapply = TRUE )  loglike_point(   theta0,   sem_out,   par_i,   verbose = FALSE,   start = \"default\",   try_k_more = 5 )  loglike_quad_range(   sem_out,   par_i,   confidence = 0.95,   n_points = 21,   interval = NULL,   parallel = FALSE,   ncpus = parallel::detectCores(logical = FALSE) - 1,   use_pbapply = TRUE,   try_k_more = 5,   start = \"default\" )  loglike_quad_point(theta0, sem_out, par_i)"},{"path":"https://sfcheung.github.io/semlbci/reference/loglikelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Profile likelihood of a Parameter — loglike_compare","text":"sem_out SEM output. Currently outputs lavaan::lavaan() wrappers, lavaan::sem() lavaan::cfa() supported. semlbci_out output semlbci(). supplied, extract likelihood-based confidence interval output. , call semlbci(). par_i row number parameter output lavaan::parameterTable(). Can also lavaan::model.syntax specification parameter, e.g., \"y ~ x\" ab := . converted row number syntax_to_i(). Refer syntax_to_i() details. confidence level confidence Wald-type confidence interval. interval NULL, confidence used form interval. n_points number points evaluated interval. Default 21. start start values set lavaan::lavaan(). See lavaan::lavOptions() argument. Default \"default\". plot irregular, try setting \"simple\". try_k_more many times try finding p-values, randomizing starting values. Default 5. Try increasing number plot irregular. parallel TRUE, parallel processing used. cluster created parallel::makeCluster(), number workers equal ncpus. Parallel processing, though enabled default, recommended can speed computation lot. ncpus number workers parallel TRUE. Default parallel::detectCores(logical = FALSE) - 1, number physical cores minus 1. use_pbapply TRUE pbapply::pbapply installed, pbapply::pbapply used display progress computing log profile likelihood. Default TRUE. interval vector numbers. provided two elements, used end points interval. two elements, elements used directly form values interval. Default NULL. verbose Whether diagnostic information printed. Default FALSE. theta0 value parameter fixed .","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/loglikelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Profile likelihood of a Parameter — loglike_compare","text":"loglike_compare() calls loglike_range() loglike_quad_range() returns results loglike_compare-class object, list elements: quadratic: output loglike_quad_range(). loglikelihood: output loglike_range(). pvalue_quadratic: likelihood ratio test p-values quadratic approximation confidence bounds. pvalue_loglikelihood: likelihood ratio test p-values likelihood-based confidence bounds. est: point estimate parameter sem_out. loglike_compare-class object plot method (plot.loglike_compare()) can used plot log profile likelihood. loglike_point() returns list elements: loglike: log profile likelihood parameter fixed theta0. pvalue: p-values based likelihood ratio difference test original model model parameter fixed theta0. fit: lavaan::lavaan object. original model parameter fixed theta0. lrt: output lavaan::lavTestLRT(), comparing original model model parameter fixed theta0. loglike_quad_range() returns data frame columns: theta: values parameter fixed . loglike: log profile likelihood values parameter using quadratic approximation. pvalue: p-values based likelihood ratio difference test original model model parameter fixed theta. loglike_quad_point() returns single number class lavaan.vector (output lavaan::fitMeasures()). number quadratic approximation log profile likelihood parameter fixed theta0. loglike_range() returns data frame columns: theta: values parameter fixed . loglike: log profile likelihood theta. pvalue: p-values based likelihood ratio difference test original model model parameter fixed theta.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/loglikelihood.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log Profile likelihood of a Parameter — loglike_compare","text":"uses methods presented Pawitan (2013) compute visualize log profile likelihood parameter structural equation model parameter fixed value range values. loglike_range() loglike_point() compute -called \"true\" log profile likelihood, loglike_quad_range() loglike_quad_point() approximate log profile likelihood quadratic function. functions creating illustrative examples learning , research use. Therefore, versatile semlbci() types models parameters supported. can used free parameters user-defined parameters involved constraints. model fitted maximum likelihood supported. check whether computation appropriate model. responsibility users ensure computation appropriate model parameter.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/loglikelihood.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Log Profile likelihood of a Parameter — loglike_compare","text":"loglike_compare(): Generates points log profile likelihood quadratic approximation, calling helper functions loglike_range() loglike_quad_range(). loglike_range(): Find log profile likelihood range values. loglike_point(): Find log likelihood value. loglike_quad_range(): Find approximated log likelihood range values. loglike_quad_point(): Find approximated log likelihood value.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/loglikelihood.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Log Profile likelihood of a Parameter — loglike_compare","text":"Pawitan, Y. (2013). likelihood: Statistical modelling inference using likelihood. Oxford University Press.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/loglikelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log Profile likelihood of a Parameter — loglike_compare","text":"","code":"## loglike_compare  library(lavaan) data(simple_med) dat <- simple_med mod <- \" m ~ a * x y ~ b * m ab := a * b \" fit <- lavaan::sem(mod, simple_med, fixed.x = FALSE)  # 4 points are used just for illustration # At least 21 points should be used for a smooth plot # Remove try_k_more in real applications. It is set # to zero such that this example does not take too long to run. # use_pbapply can be removed or set to TRUE to show the progress. ll_a <- loglike_compare(fit, par_i = \"m ~ x\", n_points = 4,                         try_k_more = 0,                         use_pbapply = FALSE) plot(ll_a)   # See the vignette \"loglike\" for an example for the # indirect effect.   ## loglike_range  # Usually not to be used directly. # Used by loglike_compare(). # 3 points are used just for illustration ll_1 <- loglike_range(fit, par_i = \"y ~ m\", n_points = 2) #>  #> Finding p-values for LR test head(ll_1) #>       theta   loglike     pvalue #> 1 0.3914228 -1570.448 0.05109878 #> 2 0.6787425 -1570.448 0.05109878   ## loglike_point  # Usually not to be used directly. # Used by loglike_compare(). llp_1 <- loglike_point(theta0 = 0.3, sem_out = fit, par_i = \"y ~ m\") llp_1$loglike #> 'log Lik.' -1573.561 (df=4) llp_1$pvalue #> [1] 0.001539546 llp_1$lrt #>  #> Chi-Squared Difference Test #>  #>         Df    AIC    BIC  Chisq Chisq diff   RMSEA Df diff Pr(>Chisq)    #> sem_out  1 3147.1 3163.6 10.549                                          #> fit_i    2 3155.1 3168.3 20.579     10.031 0.21249       1    0.00154 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1    ## loglike_quad_range  # Usually not to be used directly. # Used by loglike_compare(). # 2 points are used just for illustration lq_1 <- loglike_quad_range(fit, par_i = \"y ~ m\", n_points = 2) #>  #> Finding p-values for quadratic approximation head(lq_1) #>       theta   loglike     pvalue #> 1 0.3914228 -1570.466 0.05109878 #> 2 0.6787425 -1570.466 0.05109878    ## loglike_quad_point  # Usually not to be used directly. # Used by loglike_compare(). lqp_1 <- loglike_quad_point(theta0 = 0.3, sem_out = fit, par_i = \"y ~ m\") lqp_1 #>      logl  #> -1573.688"},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset (SEM, Three Factors, Nine Variables, Mediation) — mediation_latent","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation) — mediation_latent","text":"Generated three-factor model nine variables, n = 150","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation) — mediation_latent","text":"","code":"mediation_latent"},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation) — mediation_latent","text":"data frame 150 rows nine variables: x1 x1 x2 x2 x3 x3 x4 x4 x5 x5 x6 x6 x7 x7 x8 x8 x9 x9","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation) — mediation_latent","text":"model used examples like one:","code":"mod <- \" fx =~ x1 + x2 + x3 fm =~ x4 + x5 + x6 fy =~ x7 + x8 + x9 fm ~ a*fx fy ~ b*fm + cp*fx ab := a*b \" fit <- lavaan::sem(mod, mediation_latent)"},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation) — mediation_latent","text":"","code":"print(head(mediation_latent), digits = 3) #>       x1     x2      x3     x4     x5     x6      x7     x8     x9 #> 1 -1.393  0.141 -0.8749  0.166 -0.652 -0.469 -0.0309 -1.111 -1.378 #> 2 -0.565  0.729 -0.1052  0.744  1.815  1.371 -0.2996 -0.626  0.147 #> 3 -2.057 -2.128 -0.9271 -0.258 -1.160 -2.156 -1.8819 -1.273 -1.148 #> 4  0.698 -0.455  0.3913  0.671  0.695 -1.938 -0.0666  0.306  0.181 #> 5 -0.922 -1.848 -1.2790  1.215 -0.445 -0.173 -2.7843 -2.077 -1.086 #> 6  1.151 -0.056  0.0593  0.112  0.717 -0.744 -0.4511 -0.848 -0.494 nrow(mediation_latent) #> [1] 150"},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent_skewed.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset (SEM, Three Factors, Nine Variables, Mediation, Skewed) — mediation_latent_skewed","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation, Skewed) — mediation_latent_skewed","text":"Generated three-factor model nine variables, n = 150, observed variables positively skewed.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent_skewed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation, Skewed) — mediation_latent_skewed","text":"","code":"mediation_latent_skewed"},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent_skewed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation, Skewed) — mediation_latent_skewed","text":"data frame 150 rows nine variables: x1 x1 x2 x2 x3 x3 x4 x4 x5 x5 x6 x6 x7 x7 x8 x8 x9 x9","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent_skewed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation, Skewed) — mediation_latent_skewed","text":"model used examples like one:","code":"mod <- \" fx =~ x1 + x2 + x3 fm =~ x4 + x5 + x6 fy =~ x7 + x8 + x9 fm ~ a*fx fy ~ b*fm + cp*fx ab := a*b \" fit <- lavaan::sem(mod, mediation_latent)"},{"path":"https://sfcheung.github.io/semlbci/reference/mediation_latent_skewed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset (SEM, Three Factors, Nine Variables, Mediation, Skewed) — mediation_latent_skewed","text":"","code":"print(head(mediation_latent_skewed), digits = 3) #>       x1      x2     x3     x4     x5      x6      x7     x8      x9 #> 1 -0.531 -0.8247 -0.135  2.153  1.682  2.6862  0.0378 -0.575 -0.3487 #> 2 -0.366 -0.4707 -0.378  0.502  0.839  0.5743  2.1701  1.427  0.5184 #> 3 -0.587 -0.9881  2.105 -1.242 -0.993 -0.0189 -0.2263 -1.436 -1.0298 #> 4 -0.204 -0.9530 -0.899  0.137 -0.400 -0.0742 -0.6008 -0.107 -0.8484 #> 5  0.552 -0.0556 -0.367  2.555 -0.354  0.5379 -0.4397 -0.678 -0.7983 #> 6 -0.300 -0.4719 -0.501  0.803  1.904 -0.1835  1.2731 -0.317 -0.0114 nrow(mediation_latent_skewed) #> [1] 150"},{"path":"https://sfcheung.github.io/semlbci/reference/nearby_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"LBCI Bounds of Nearby Levels of Confidence — nearby_levels","title":"LBCI Bounds of Nearby Levels of Confidence — nearby_levels","text":"Find LBCIs levels confidence different stored semlbci- class object.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/nearby_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LBCI Bounds of Nearby Levels of Confidence — nearby_levels","text":"","code":"nearby_levels(x, ciperc_levels = c(-0.025, 0.025), ciperc_range = c(0.6, 0.99))"},{"path":"https://sfcheung.github.io/semlbci/reference/nearby_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LBCI Bounds of Nearby Levels of Confidence — nearby_levels","text":"x output semlbci(). ciperc_levels numeric vector deviations original level confidence. default c(-.025, .025). Therefore, original level .95, levels used c(-.025, .025) + .95 c(.925, .975). ciperc_range numeric vector two numbers, minimum maximum levels confidence used, respectively. Default c(.60, .99).","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/nearby_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LBCI Bounds of Nearby Levels of Confidence — nearby_levels","text":"semlbci_list-class object, simply named list semlbci-class object, names levels confidence.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/nearby_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LBCI Bounds of Nearby Levels of Confidence — nearby_levels","text":"receives semlbci-class object, gets original level confidence, generates one levels confidence different level certain amounts, repeats original call semlbci() levels confidence. results returned list class semlbci_list, originalsemlbci-class included.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/nearby_levels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LBCI Bounds of Nearby Levels of Confidence — nearby_levels","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/nearby_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LBCI Bounds of Nearby Levels of Confidence — nearby_levels","text":"","code":"library(lavaan) mod <- \" m ~ x y ~ m \" fit_med <- sem(mod, simple_med, fixed.x = FALSE) lbci_fit <- semlbci(fit_med) lbci_fit_nb <- nearby_levels(lbci_fit,                              ciperc_levels = c(-.050, .050)) names(lbci_fit_nb) #> [1] \"0.9\"  \"0.95\" \"0.99\" # Check the order of the confidence bounds. # A confidence interval with a higher level of confidence # should enclose a confidence interval with # a lower level of confidence. ci_order(lbci_fit_nb) #>     lb_0.99 lb_0.95  lb_0.9  ub_0.9 ub_0.95 ub_0.99 Order #> m~x   0.557 < 0.828 ! 0.965 < 2.387 ! 2.525 < 2.795    OK #> y~m   0.345 < 0.391 ! 0.414 < 0.656 ! 0.679 < 0.725    OK"},{"path":"https://sfcheung.github.io/semlbci/reference/plot.loglike_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Output of 'loglike_compare()' — plot.loglike_compare","title":"Plot the Output of 'loglike_compare()' — plot.loglike_compare","text":"Visualize log profile likelihood parameter fixed values range.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/plot.loglike_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Output of 'loglike_compare()' — plot.loglike_compare","text":"","code":"# S3 method for loglike_compare plot(   x,   y,   type = c(\"ggplot2\", \"default\"),   size_label = 4,   size_point = 4,   nd_theta = 3,   nd_pvalue = 3,   size_theta = 4,   size_pvalue = 4,   add_pvalues = FALSE,   ... )"},{"path":"https://sfcheung.github.io/semlbci/reference/plot.loglike_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Output of 'loglike_compare()' — plot.loglike_compare","text":"x output loglike_compare(). y used. type Character. \"ggplot2\", use ggplot2::ggplot() plot graph. \"default\", use R base graphics, ggplot2 version plots information. Default \"ggplot2\". size_label relative size labels thetas (p-values, requested) plot, determined ggplot2::rel(). Default 4. size_point relative size points added p-values requested plot, determined ggplot2::rel(). Default 4. nd_theta number decimal places labels theta. Default 3. nd_pvalue number decimal places labels p-values. Default 3. size_theta Deprecated. longer used. size_pvalue Deprecated. longer used. add_pvalues TRUE, likelihood ratio test p-values included confidence limits. available type = \"ggplot2\". ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/plot.loglike_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Output of 'loglike_compare()' — plot.loglike_compare","text":"Nothing type = \"default\", generated ggplot2::ggplot() graph type = \"ggplot2\".","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/plot.loglike_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the Output of 'loglike_compare()' — plot.loglike_compare","text":"Given output loglike_compare(), plots log profile likelihood based quadratic approximation based original log-likelihood. log profile likelihood scaled maximum zero (point estimate) suggested Pawitan (2013).","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/plot.loglike_compare.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot the Output of 'loglike_compare()' — plot.loglike_compare","text":"Pawitan, Y. (2013). likelihood: Statistical modelling inference using likelihood. Oxford University Press.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/plot.loglike_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Output of 'loglike_compare()' — plot.loglike_compare","text":"","code":"## loglike_compare  library(lavaan) data(simple_med) dat <- simple_med mod <- \" m ~ a * x y ~ b * m ab := a * b \" fit <- lavaan::sem(mod, simple_med, fixed.x = FALSE)  # Four points are used just for illustration # At least 21 points should be used for a smooth plot # Remove try_k_more in real applications. It is set # to run such that this example is not too slow. # use_pbapply can be removed or set to TRUE to show the progress. ll_a <- loglike_compare(fit, par_i = \"m ~ x\", n_points = 4,                         try_k_more = 0,                         use_pbapply = FALSE)  plot(ll_a)  plot(ll_a, add_pvalues = TRUE)   # See the vignette \"loglike\" for an example for the # indirect effect."},{"path":"https://sfcheung.github.io/semlbci/reference/print.cibound.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method of a 'cibound'-class Object — print.cibound","title":"Print Method of a 'cibound'-class Object — print.cibound","text":"Print diagnostic information cibound-class object.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/print.cibound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method of a 'cibound'-class Object — print.cibound","text":"","code":"# S3 method for cibound print(x, digits = 5, ...)"},{"path":"https://sfcheung.github.io/semlbci/reference/print.cibound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method of a 'cibound'-class Object — print.cibound","text":"x output ci_bound_xx_i function. Currently function ci_bound_wn_i(). digits number digits decimal point. passed round(). Default 5. ... arguments. ignored.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/print.cibound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method of a 'cibound'-class Object — print.cibound","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/print.cibound.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print Method of a 'cibound'-class Object — print.cibound","text":"print method output ci_bound_wn_i(), cibound-class object. prints diagnostic information bound found search process.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/print.cibound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method of a 'cibound'-class Object — print.cibound","text":"","code":"data(simple_med) dat <- simple_med  mod <- \" m ~ x y ~ m \"  fit_med <- lavaan::sem(mod, simple_med, fixed.x = FALSE)  fn_constr0 <- set_constraint(fit_med)  out1l <- ci_bound_wn_i(i = 1,                        npar = 5,                        sem_out = fit_med,                        f_constr = fn_constr0,                        which = \"lbound\")  # Print the output out1l #> Target Parameter:\tm ~ x (group = 1, block = 1) #> Position:\t\t1 #> Which Bound:\t\tLower Bound #> Method:\t\t\tWu-Neale-2012 #> Confidence Level:\t0.95 #> Achieved Level:\t\t0.950000000054991 #> Standardized:\t\tNo #> Likelihood-Based Bound:\t0.8277 #> Wald Bound:\t\t0.83177 #> Point Estimate:\t\t1.67613 #> Ratio to Wald Bound:\t1.00482 #>  #> -- Check -- #> Level achieved?\t\tYes (Difference: 5.4991e-11; Tolerance: 5e-04) #> Solution admissible?\tYes #> Direction valid?\tYes #>  #> -- Optimization Information -- #> Solver Status:\t\t4 #> Convergence Message:\tNLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached. #> Iterations:\t\t3 #> Termination Conditions: #> \txtol_rel: 1e-05 #> \tftol_rel: 1e-05 #> \tmaxeval:  500 #>  #> -- Parameter Estimates -- #>             m~x     y~m     m~~m     y~~y    x~~x #> Start   0.83177 0.53508 35.37699 40.11896 0.93513 #> Final   0.82770 0.53508 35.37711 40.11896 0.93513 #> Change -0.00407 0.00000  0.00011  0.00000 0.00000 #>  #> Bound before check:\t0.8277 #> Status Code:\t\t0 #> Call: ci_bound_wn_i(i = 1, npar = 5, sem_out = fit_med, f_constr = fn_constr0,  #>     which = \"lbound\") #>"},{"path":"https://sfcheung.github.io/semlbci/reference/print.semlbci.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method of a 'semlbci' Object — print.semlbci","title":"Print Method of a 'semlbci' Object — print.semlbci","text":"Prints results semlbci object, output semlbci().","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/print.semlbci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method of a 'semlbci' Object — print.semlbci","text":"","code":"# S3 method for semlbci print(   x,   digits = 3,   annotation = TRUE,   time = FALSE,   verbose = FALSE,   verbose_if_needed = TRUE,   drop_no_lbci = TRUE,   ... )"},{"path":"https://sfcheung.github.io/semlbci/reference/print.semlbci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method of a 'semlbci' Object — print.semlbci","text":"x output semlbci(). digits number digits decimal point. passed formatC(). Default 3. annotation TRUE, print table notes. Default TRUE. time TRUE, print time spent bound. Default FALSE. verbose TRUE, additional diagnostic information always printed. argument overrides verbose_if_needed. Default FALSE. verbose_if_needed TRUE, additional diagnostic information printed necessary. FALSE, additional diagnostic information always printed. Default TRUE. drop_no_lbci TRUE, parameters without LBCIs removed. Default TRUE. ... arguments. ignored.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/print.semlbci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method of a 'semlbci' Object — print.semlbci","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/print.semlbci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print Method of a 'semlbci' Object — print.semlbci","text":"Prints results semlbci() table.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/print.semlbci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method of a 'semlbci' Object — print.semlbci","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/print.semlbci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method of a 'semlbci' Object — print.semlbci","text":"","code":"library(lavaan) mod <- \" m ~ a*x y ~ b*m ab := a * b \" fit_med <- sem(mod, simple_med, fixed.x = FALSE) p_table <- parameterTable(fit_med) p_table #>   id lhs op rhs user block group free ustart exo label plabel  start    est #> 1  1   m  ~   x    1     1     1    1     NA   0     a   .p1.  1.676  1.676 #> 2  2   y  ~   m    1     1     1    2     NA   0     b   .p2.  0.535  0.535 #> 3  3   m ~~   m    0     1     1    3     NA   0         .p3. 34.710 34.710 #> 4  4   y ~~   y    0     1     1    4     NA   0         .p4. 40.119 40.119 #> 5  5   x ~~   x    0     1     1    5     NA   0         .p5.  0.935  0.935 #> 6  6  ab := a*b    1     0     0    0     NA   0    ab         0.000  0.897 #>      se #> 1 0.431 #> 2 0.073 #> 3 3.471 #> 4 4.012 #> 5 0.094 #> 6 0.261 lbci_med <- semlbci(fit_med,                     pars = c(\"ab :=\")) lbci_med #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 6  6  ab := a*b    ab 0.897   0.427   1.464 0.385 1.409 0.950 0.950 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #>  #> Call: #> semlbci(sem_out = fit_med, pars = c(\"ab :=\"))  print(lbci_med, verbose_if_needed = FALSE) #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub ok_l ok_u    lb    ub ratio_l #> 6  6  ab := a*b    ab 0.897   0.427   1.464    0    0 0.385 1.409   0.919 #>   ratio_u check_l check_u cl_lb cl_ub #> 6   1.108    TRUE    TRUE 0.950 0.950 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * ok_l, ok_u: Whether the search encountered any problem. If no problem #>     encountered, it is equal to 0. Any value other than 0 indicates #>     something was wrong in the search. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #> * ratio_l, ratio_u: Ratio of a to b, a = Distance from the point #>     estimate to the likelihood-based bound, b = Distance from the point #>     estimate to the original bound. A bound should be interpreted with #>     caution if the ratio is too large or too small, indicating a large #>     difference between the original interval and the likelihood-based #>     interval. #> * check_l, check_u: Whether the final solution of a bound passed the #>     post optimization check of lavaan by lavaan::lavInspect(fit, #>     'post.check'), where fit is the final solution. #>  #> Call: #> semlbci(sem_out = fit_med, pars = c(\"ab :=\"))  print(lbci_med, verbose = TRUE) #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub ok_l ok_u    lb    ub ratio_l #> 6  6  ab := a*b    ab 0.897   0.427   1.464    0    0 0.385 1.409   0.919 #>   ratio_u check_l check_u cl_lb cl_ub #> 6   1.108    TRUE    TRUE 0.950 0.950 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * ok_l, ok_u: Whether the search encountered any problem. If no problem #>     encountered, it is equal to 0. Any value other than 0 indicates #>     something was wrong in the search. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #> * ratio_l, ratio_u: Ratio of a to b, a = Distance from the point #>     estimate to the likelihood-based bound, b = Distance from the point #>     estimate to the original bound. A bound should be interpreted with #>     caution if the ratio is too large or too small, indicating a large #>     difference between the original interval and the likelihood-based #>     interval. #> * check_l, check_u: Whether the final solution of a bound passed the #>     post optimization check of lavaan by lavaan::lavInspect(fit, #>     'post.check'), where fit is the final solution. #>  #> Call: #> semlbci(sem_out = fit_med, pars = c(\"ab :=\"))  print(lbci_med, time = TRUE) #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub sec_l sec_u cl_lb cl_ub #> 6  6  ab := a*b    ab 0.897   0.427   1.464 0.385 1.409 0.218 0.199 0.950 0.950 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #> * sec_l, sec_u: The time (in seconds) used to search a bound. #>  #> Call: #> semlbci(sem_out = fit_med, pars = c(\"ab :=\"))  print(lbci_med, annotation = FALSE) #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 6  6  ab := a*b    ab 0.897   0.427   1.464 0.385 1.409 0.950 0.950  print(lbci_med, digits = 4) #>  #> Results: #>   id lhs op rhs label    est lbci_lb lbci_ub     lb     ub  cl_lb  cl_ub #> 6  6  ab := a*b    ab 0.8969  0.4265  1.4640 0.3849 1.4088 0.9500 0.9500 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #>  #> Call: #> semlbci(sem_out = fit_med, pars = c(\"ab :=\"))"},{"path":"https://sfcheung.github.io/semlbci/reference/reg_cor_near_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset (Six Variables, One Correlation Close to One) — reg_cor_near_one","title":"Dataset (Six Variables, One Correlation Close to One) — reg_cor_near_one","text":"Generated regression model six variables, x4~~x5 correlation close one.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/reg_cor_near_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset (Six Variables, One Correlation Close to One) — reg_cor_near_one","text":"","code":"reg_cor_near_one"},{"path":"https://sfcheung.github.io/semlbci/reference/reg_cor_near_one.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset (Six Variables, One Correlation Close to One) — reg_cor_near_one","text":"data frame 100 rows six variables: x1 x1 x2 x2 x3 x3 x4 x4, correlation x5 nearly equal 1 x5 x5, correlation x4 nearly equal 1 y y, dependent variable","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/reg_cor_near_one.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset (Six Variables, One Correlation Close to One) — reg_cor_near_one","text":"model used examples like one:","code":"out <- lm(y ~ x1 + x2 + x3 + x4 + x5, reg_cor_near_one) summary(out) cor(reg_cor_near_one[, c(\"x4\", \"x5\")])"},{"path":"https://sfcheung.github.io/semlbci/reference/reg_cor_near_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset (Six Variables, One Correlation Close to One) — reg_cor_near_one","text":"","code":"print(head(reg_cor_near_one), digits = 3) #>       x1     x2      x3      x4      x5      y #> 1 -0.687 -0.266  1.1400  0.2151  0.2368  0.305 #> 2  1.651 -0.447  0.0955 -0.8698 -0.9360 -0.481 #> 3  0.909  1.106 -1.1913  0.0804  0.0891  0.799 #> 4  0.598  1.710 -0.6715 -1.4201 -1.4841 -0.236 #> 5  0.122 -0.689 -0.2420 -0.7906 -0.8070 -0.390 #> 6  0.923  1.041 -0.4671 -2.1551 -2.1470 -0.788 nrow(reg_cor_near_one) #> [1] 100"},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci-package.html","id":null,"dir":"Reference","previous_headings":"","what":"semlbci: Likelihood-Based Confidence Interval in Structural Equation Models — semlbci-package","title":"semlbci: Likelihood-Based Confidence Interval in Structural Equation Models — semlbci-package","text":"Forms likelihood-based confidence intervals (LBCIs) parameters structural equation modeling, introduced Cheung Pesigan (2023) doi:10.1080/10705511.2023.2183860 . Currently implements algorithm illustrated Pek Wu (2018) doi:10.1037/met0000163 , supports robust LBCI proposed Falk (2018) doi:10.1080/10705511.2017.1367254 .","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"semlbci: Likelihood-Based Confidence Interval in Structural Equation Models — semlbci-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) contributors: Ivan Jacob Agaloos Pesigan r.jeksterslab@gmail.com (ORCID) [contributor]","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood-Based Confidence Interval — semlbci","title":"Likelihood-Based Confidence Interval — semlbci","text":"Find likelihood-based confidence intervals (LBCIs) selected free parameters SEM output.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood-Based Confidence Interval — semlbci","text":"","code":"semlbci(   sem_out,   pars = NULL,   include_user_pars = TRUE,   remove_variances = TRUE,   remove_intercepts = TRUE,   ciperc = 0.95,   standardized = FALSE,   method = \"wn\",   robust = c(\"none\", \"satorra.2000\"),   try_k_more_times = 2,   semlbci_out = NULL,   check_fit = TRUE,   ...,   parallel = FALSE,   ncpus = 2,   use_pbapply = TRUE )"},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood-Based Confidence Interval — semlbci","text":"sem_out SEM output. Currently supports lavaan::lavaan outputs . pars positions parameters LBCIs searched. Use position appeared parameter tables sem_out. NULL, default, LBCIs free parameters searched. Can also vector strings indicate parameters parameter table. parameters specified lavaan::lavaan() syntax. vector strings converted syntax_to_i() parameter positions. See syntax_to_i() specify parameters. include_user_pars Logical. Whether user-defined parameters automatically included pars set. Default TRUE. pars explicitly set, argument ignored. remove_variances Logical. Whether variances error variances removed. Default TRUE, removing variances error variances even specified pars. remove_intercepts Logical. Whether intercepts removed. Default TRUE, removing intercepts (parameters operator ~1). Intercepts yet supported standardized solution always removed standardized = TRUE. ciperc proportion coverage confidence interval. Default .95, requesting 95 percent confidence interval. standardized TRUE, LBCI standardized estimates. method method used search confidence bounds. Currently \"wn\" (Wu-Neale-2012), default, supported. robust Whether LBCI based robust likelihood ratio test found. \"satorra.2000\" lavaan::lavTestLRT() supported now, implemented method proposed Falk (2018). \"none\", default, likelihood ratio test based maximum likelihood estimation used. try_k_more_times many times try failed. Default 2. semlbci_out semlbci-class object. provided, parameters already LBCIs formed excluded pars. check_fit TRUE (default), input (sem_out) checked check_sem_out(). supported, error raised. FALSE, check skipped LBCIs searched even model parameter supported. Set TRUE testing. ... Arguments passed ci_bound_wn_i(). parallel TRUE, use parallel processing search. ncpus number workers, parallel TRUE. Default 2. number larger number CPU cores. use_pbapply TRUE pbapply installed, pbapply::pbapply() used display progress bar finding intervals. Default TRUE. Ignored pbapply installed.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood-Based Confidence Interval — semlbci","text":"semlbci-class object similar parameter table generated lavaan::parameterEstimates(), LBCIs selected parameters added. Diagnostic information, requested, included attributes. See print.semlbci() options available.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Likelihood-Based Confidence Interval — semlbci","text":"semlbci() finds positions selected parameters parameter table calls ci_i_one() . technical details, please see ci_i_one() functions calls find confidence bound, currently ci_bound_wn_i(). ci_bound_wn_i() uses approach proposed Wu Neale (2012) illustrated Pek Wu (2015). supports updating output semlbci() setting semlbci_out. allows forming LBCIs parameters others formed. possible, parallel processing used (see parallel ncpus), especially model many parameters. search confidence bounds failed, NA bounds, try increasing try_k_more_times. SEM output first checked check_sem_out() see whether model estimation method supported. skip test (e.g., testing experimenting models estimators), set check_fit FALSE. Examples technical details can found Cheung Pesigan (2023), website semlbci package (https://sfcheung.github.io/semlbci/), technical appendices (https://sfcheung.github.io/semlbci/articles/). currently supports lavaan::lavaan outputs .","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Likelihood-Based Confidence Interval — semlbci","text":"Cheung, S. F., & Pesigan, . J. . (2023). semlbci: R package forming likelihood-based confidence intervals parameter estimates, correlations, indirect effects, derived parameters. Structural Equation Modeling: Multidisciplinary Journal. Advance online publication. doi:10.1080/10705511.2023.2183860 Falk, C. F. (2018). robust standard errors best approach interval estimation nonnormal data structural equation modeling? Structural Equation Modeling: Multidisciplinary Journal, 25(2), 244-266. doi:10.1080/10705511.2017.1367254 Pek, J., & Wu, H. (2015). Profile likelihood-based confidence intervals regions structural equation models. Psychometrika, 80(4), 1123-1145. doi:10.1007/s11336-015-9461-1 Wu, H., & Neale, M. C. (2012). Adjusted confidence intervals bounded parameter. Behavior Genetics, 42(6), 886-898. doi:10.1007/s10519-012-9560-z Pritikin, J. N., Rappaport, L. M., & Neale, M. C. (2017). Likelihood-based confidence intervals parameter upper lower bound. Structural Equation Modeling: Multidisciplinary Journal, 24(3), 395-401. doi:10.1080/10705511.2016.1275969","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Likelihood-Based Confidence Interval — semlbci","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/semlbci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood-Based Confidence Interval — semlbci","text":"","code":"library(lavaan) mod <- \" m ~ a*x y ~ b*m ab := a * b \" fit_med <- sem(mod, simple_med, fixed.x = FALSE) p_table <- parameterTable(fit_med) p_table #>   id lhs op rhs user block group free ustart exo label plabel  start    est #> 1  1   m  ~   x    1     1     1    1     NA   0     a   .p1.  1.676  1.676 #> 2  2   y  ~   m    1     1     1    2     NA   0     b   .p2.  0.535  0.535 #> 3  3   m ~~   m    0     1     1    3     NA   0         .p3. 34.710 34.710 #> 4  4   y ~~   y    0     1     1    4     NA   0         .p4. 40.119 40.119 #> 5  5   x ~~   x    0     1     1    5     NA   0         .p5.  0.935  0.935 #> 6  6  ab := a*b    1     0     0    0     NA   0    ab         0.000  0.897 #>      se #> 1 0.431 #> 2 0.073 #> 3 3.471 #> 4 4.012 #> 5 0.094 #> 6 0.261 lbci_med <- semlbci(fit_med,                     pars = c(\"m ~ x\",                              \"y ~ m\",                              \"ab :=\")) lbci_med #>  #> Results: #>   id lhs op rhs label   est lbci_lb lbci_ub    lb    ub cl_lb cl_ub #> 1  1   m  ~   x     a 1.676   0.828   2.525 0.832 2.520 0.950 0.950 #> 2  2   y  ~   m     b 0.535   0.391   0.679 0.391 0.679 0.950 0.950 #> 6  6  ab := a*b    ab 0.897   0.427   1.464 0.385 1.409 0.950 0.950 #>  #> Annotation: #> * lbci_lb, lbci_ub: The lower and upper likelihood-based bounds. #> * est: The point estimates from the original lavaan output. #> * lb, ub: The original lower and upper bounds, extracted from the #>     original lavaan output. Usually Wald CIs for free parameters and #>     delta method CIs for user-defined parameters #> * cl_lb, cl_ub: One minus the p-values of chi-square difference tests #>     at the bounds. Should be close to the requested level of #>     confidence, e.g., .95 for 95% confidence intervals. #>  #> Call: #> semlbci(sem_out = fit_med, pars = c(\"m ~ x\", \"y ~ m\", \"ab :=\"))"},{"path":"https://sfcheung.github.io/semlbci/reference/set_constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Equality Constraint for Finding the LBCI by Wu-Neale-2012 — set_constraint","title":"Equality Constraint for Finding the LBCI by Wu-Neale-2012 — set_constraint","text":"Create equality constraint finding likelihood-based confidence interval (LBCI) Wu-Neale-2012 method.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/set_constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equality Constraint for Finding the LBCI by Wu-Neale-2012 — set_constraint","text":"","code":"set_constraint(sem_out, ciperc = 0.95)"},{"path":"https://sfcheung.github.io/semlbci/reference/set_constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equality Constraint for Finding the LBCI by Wu-Neale-2012 — set_constraint","text":"sem_out SEM output. Currently supports lavaan::lavaan outputs . ciperc intendeted coverage probability confidence interval. Default .95.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/set_constraint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equality Constraint for Finding the LBCI by Wu-Neale-2012 — set_constraint","text":"equality constraint function used ci_bound_wn_i().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/semlbci/reference/set_constraint.html","id":"important-notice","dir":"Reference","previous_headings":"","what":"Important Notice","title":"Equality Constraint for Finding the LBCI by Wu-Neale-2012 — set_constraint","text":"function supposed used directly users typical scenarios. interface user-unfriendly used semlbci(). exported interested users can examine confidence bound found, use experiments simulations.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/set_constraint.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equality Constraint for Finding the LBCI by Wu-Neale-2012 — set_constraint","text":"Wu-Neale-2012 method uses simple objective function optimized equality constraint. set_constraint() generates equality constraint function used ci_bound_wn_i(). currently supports lavaan::lavaan outputs .","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/set_constraint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equality Constraint for Finding the LBCI by Wu-Neale-2012 — set_constraint","text":"","code":"library(lavaan) data(simple_med) dat <- simple_med mod <- \" m ~ x y ~ m \" fit_med <- sem(mod, simple_med, fixed.x = FALSE)  fn_constr0 <- set_constraint(fit_med) out <- fn_constr0(coef(fit_med), sem_out = fit_med) out #> $objective #> [1] 0.02637152 #>  #> $gradient #>              [,1]        [,2]          [,3]          [,4]          [,5] #> [1,] 6.351961e-18 6.56375e-18 -5.605735e-20 -2.245085e-18 -1.144598e-18 #>  #> $constraints #> [1] -0.009603647 #>  #> $jacobian #>              [,1]        [,2]          [,3]          [,4]          [,5] #> [1,] 6.351961e-18 6.56375e-18 -5.605735e-20 -2.245085e-18 -1.144598e-18 #>  #> $parameterTable #>   id lhs op rhs user block group free ustart exo label plabel  start    est se #> 1  1   m  ~   x    1     1     1    1     NA   0         .p1.  1.676  1.676 NA #> 2  2   y  ~   m    1     1     1    2     NA   0         .p2.  0.535  0.535 NA #> 3  3   m ~~   m    0     1     1    3     NA   0         .p3. 34.710 34.710 NA #> 4  4   y ~~   y    0     1     1    4     NA   0         .p4. 40.119 40.119 NA #> 5  5   x ~~   x    0     1     1    5     NA   0         .p5.  0.935  0.935 NA #>  lavTech(fit_med, \"optim\")$fx #> [1] 0.02637152"},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset (Simple Mediation Model) — simple_med","title":"Dataset (Simple Mediation Model) — simple_med","text":"Generated simple mediation model, n = 200","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset (Simple Mediation Model) — simple_med","text":"","code":"simple_med"},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset (Simple Mediation Model) — simple_med","text":"data frame 200 rows three variables: x x, independent variable m m, mediator y y, dependent variable","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset (Simple Mediation Model) — simple_med","text":"model used examples like one:","code":"library(lavaan) mod <- \"m ~ x         y ~ m\" fit <- cfa(mod, simple_med) summary(fit)"},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset (Simple Mediation Model) — simple_med","text":"","code":"print(head(simple_med), digits = 3) #>        x      m     y #> 1 -0.345   7.28 -5.64 #> 2 -0.366  -5.45 -4.53 #> 3 -0.829  -7.02 -7.82 #> 4 -0.339   4.37  1.56 #> 5 -0.963  -4.02 -7.29 #> 6 -1.075 -11.54 -4.15 nrow(simple_med) #> [1] 200"},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med_mg.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset (Simple Mediation Model, Two Groups) — simple_med_mg","title":"Dataset (Simple Mediation Model, Two Groups) — simple_med_mg","text":"Generated simple mediation model, n = 200, two groups, n = 100 .","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med_mg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset (Simple Mediation Model, Two Groups) — simple_med_mg","text":"","code":"simple_med_mg"},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med_mg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset (Simple Mediation Model, Two Groups) — simple_med_mg","text":"data frame 500 rows four variables: gp gp, grouping variable x x, independent variable m m, mediator y y, dependent variable","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med_mg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset (Simple Mediation Model, Two Groups) — simple_med_mg","text":"model used examples like one:","code":"library(lavaan) mod <- \"m ~ x         y ~ m\" fit <- sem(mod, simple_med_mg, gp = \"group\") summary(fit)"},{"path":"https://sfcheung.github.io/semlbci/reference/simple_med_mg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset (Simple Mediation Model, Two Groups) — simple_med_mg","text":"","code":"print(head(simple_med_mg), digits = 3) #>    gp      x      m     y #> 1 gp1 -0.345   7.28 -5.64 #> 2 gp1 -0.366  -5.45 -4.53 #> 3 gp1 -0.829  -7.02 -7.82 #> 4 gp1 -0.339   4.37  1.56 #> 5 gp1 -0.963  -4.02 -7.29 #> 6 gp1 -1.075 -11.54 -4.15 nrow(simple_med_mg) #> [1] 200 table(simple_med_mg$gp) #>  #> gp1 gp2  #> 100 100"},{"path":"https://sfcheung.github.io/semlbci/reference/syntax_to_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Positions From lavaan Syntax — syntax_to_i","title":"Parameter Positions From lavaan Syntax — syntax_to_i","text":"Converts lavaan syntax positions model parameter table.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/syntax_to_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Positions From lavaan Syntax — syntax_to_i","text":"","code":"syntax_to_i(syntax, sem_out)"},{"path":"https://sfcheung.github.io/semlbci/reference/syntax_to_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Positions From lavaan Syntax — syntax_to_i","text":"syntax vector parameters, defined lavaan. sem_out SEM output. Currently lavaan output .","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/syntax_to_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Positions From lavaan Syntax — syntax_to_i","text":"numeric vector positions (row numbers) parameter table.","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/syntax_to_i.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter Positions From lavaan Syntax — syntax_to_i","text":"syntax_to_i() converts vector strings, lavaan syntax, positions parameter table lavaan::lavaan fit object. element vector left hand side (lhs), operator (op), /right hand side (rhs). example:.x \"m ~ x\" denotes coefficient path x m. \"y ~~ x\"  denotes covariance y x. user-defined parameters, lhs op interpreted. example: specify user parameter ab, \"ab := ...\" \"ab :=\" , ... definition ab model. right-hand side ignored. denote labelled parameters, \"y ~ *x\", treat user-defined parameters use :=, e.g., \":=\" example. multiple-group models, parameter specified single-group models, parameter groups selected. example:.x model three groups, \"y ~ x\" denotes path parameter three groups, converted three row numbers. select parameter specific group, \"multiply\" right-hand-side variable group number. example: \"y ~ 2*x\" denotes path coefficient x y Group 2. denote parameters one group, multiply right-hand side variable vector number. example:.x \"f1 =~ c(2,3)*x2\" denotes factor loading x2 f1 Group 2 Group 3. Elements converted parameter parameter table ignored. Currently supports lavaan::lavaan outputs .","code":""},{"path":"https://sfcheung.github.io/semlbci/reference/syntax_to_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Positions From lavaan Syntax — syntax_to_i","text":"","code":"library(lavaan) data(simple_med) mod <- \" m ~ a*x y ~ b*m ab:= a*b asq:= a^2 \" fit_med <- sem(mod, simple_med, fixed.x = FALSE) p_table <- parameterTable(fit_med)  pars <- c(\"m ~ x\",           \"y ~ m\",           \"asq := 1\",           \"ab  := 2\",           \"not in table\") out <- syntax_to_i(pars, fit_med) out #> [1] 1 2 6 7 p_table[out, ] #>   id lhs op rhs user block group free ustart exo label plabel start   est    se #> 1  1   m  ~   x    1     1     1    1     NA   0     a   .p1. 1.676 1.676 0.431 #> 2  2   y  ~   m    1     1     1    2     NA   0     b   .p2. 0.535 0.535 0.073 #> 6  6  ab := a*b    1     0     0    0     NA   0    ab        0.000 0.897 0.261 #> 7  7 asq := a^2    1     0     0    0     NA   0   asq        0.000 2.809 1.444"},{"path":"https://sfcheung.github.io/semlbci/news/index.html","id":"semlbci-01031","dir":"Changelog","previous_headings":"","what":"semlbci 0.10.3.1","title":"semlbci 0.10.3.1","text":"Update README.md CRAN release. Identical CRAN release code. (0.10.3.1)","code":""},{"path":"https://sfcheung.github.io/semlbci/news/index.html","id":"semlbci-0103","dir":"Changelog","previous_headings":"","what":"semlbci 0.10.3","title":"semlbci 0.10.3","text":"CRAN release: 2023-05-07 First submission CRAN. (0.10.2) Fixed description DESCRIPTION. (0.10.3) Uncommented lines code examples. (0.10.3) Make sure cat() calls can suppressed. (0.10.3)","code":""},{"path":"https://sfcheung.github.io/semlbci/news/index.html","id":"semlbci-010012-to-010031","dir":"Changelog","previous_headings":"","what":"semlbci 0.10.0.12 to 0.10.0.31","title":"semlbci 0.10.0.12 to 0.10.0.31","text":"First public release. (0.10.0.12) Added R CMD Check GitHub actions. (0.10.0.13) WIP Changes CITATION, DESCRIPTION, README. (0.10.0.14) Revised test. (0.10.0.15) WIP fixed documentations. (0.10.0.16) Simplified examples loglike_compare() helpers. (0.10.0.17) Used precomputed vignettes. (0.10.0.17) Added vignette loglike_compare(). (0.10.0.17) Made examples loglike_compare(), plot.loglike_compare(), nearby_levels() run faster. (0.10.0.18) Fixed bug loglike_compare() pass use_pbapply helper functions. (0.10.0.18) Added semlbci_out argument loglike_compare(). (0.10.0.18) Added arguments plot.loglike_compare() fixed problems labels. (0.10.0.19) Added rlang Imports avoid need set global variables (0.10.0.19) Updated vignette loglike_compare(). (0.10.0.19) Set try_k_more 0 examples loglike_compare() plot.loglike_compare() can run faster. (0.10.0.20) Fixed details documentation. (0.10.0.21) Fixed examples documentation. (0.10.0.22) Proofread vignettes recompute . (0.10.0.23) Fixed pkgdown site. (0.10.0.24) Used bibentry() CITATION. (0.10.0.24) Updated doc. (0.10.0.25) Added simplified versions technical appendices vignettes. (0.10.0.26) Updated vignettes. (0.10.0.27) Changed technical appendix vignette article. (0.10.0.28) Proofread technical articles. (0.10.0.29) Updated sources. (0.10.0.30) Fixed typos tests. (0.10.0.31)","code":""}]
